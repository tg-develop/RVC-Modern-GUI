{"version":3,"file":"static/js/main.da08822f62b36d75af5f.js","mappings":"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","sources":["webpack://modern-gui/./src/scripts/useAppGuiSetting.ts","webpack://modern-gui/./src/context/AppRootProvider.tsx","webpack://modern-gui/./src/context/ThemeContext.tsx","webpack://modern-gui/./src/scripts/useVCClient.ts","webpack://modern-gui/./src/context/AppContext.tsx","webpack://modern-gui/./src/components/Modals/LoadingScreen.tsx","webpack://modern-gui/./src/components/Modals/ErrorNotifications.tsx","webpack://modern-gui/./src/context/UIContext.tsx","webpack://modern-gui/./src/scripts/usePlaceholder.ts","webpack://modern-gui/./src/components/LeftSideBar/ModelSlot.tsx","webpack://modern-gui/./src/components/LeftSideBar/ModelList.tsx","webpack://modern-gui/./src/styles/constants.ts","webpack://modern-gui/./src/components/LeftSideBar/ModelFilter.tsx","webpack://modern-gui/./src/components/Modals/GenericModal.tsx","webpack://modern-gui/./src/components/LeftSideBar/Modals/UploadModelModal.tsx","webpack://modern-gui/./src/components/LeftSideBar/Sidebar.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/Merge/MergeFilter.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/Merge/MergeModelList.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/Merge/MergeConfiguration.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/Merge/MergeLabModal.tsx","webpack://modern-gui/./src/components/BottomBar/BottomBar.tsx","webpack://modern-gui/./src/components/Helpers/DebouncedSlider.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/AdvancedSettingsModal.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/ServerInfoModal.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/ClientInfoModal.tsx","webpack://modern-gui/./src/components/LeftSideBar/Modals/EditModelModal.tsx","webpack://modern-gui/./src/components/LeftSideBar/Modals/DeleteModelModal.tsx","webpack://modern-gui/./src/components/BottomBar/Modals/PassthroughConfirmModal.tsx","webpack://modern-gui/./src/components/Helpers/SortableCardItem.tsx","webpack://modern-gui/./src/components/Helpers/DragHandle.tsx","webpack://modern-gui/./src/components/ModelSettings/ModelInfo.tsx","webpack://modern-gui/./src/components/ModelSettings/ModelSettings.tsx","webpack://modern-gui/./src/components/ModelSettings/ModelSettingsCard.tsx","webpack://modern-gui/./src/components/Helpers/Tooltip.tsx","webpack://modern-gui/./src/components/PerformanceStats/PerformanceStatsCard.tsx","webpack://modern-gui/./src/components/AiSettings/AiSettingsCard.tsx","webpack://modern-gui/./src/components/AudioSettings/AudioMode.tsx","webpack://modern-gui/./src/components/AudioSettings/AudioDevicesServer.tsx","webpack://modern-gui/./src/components/AudioSettings/AudioVolume.tsx","webpack://modern-gui/./src/components/AudioSettings/AudioDevicesClient.tsx","webpack://modern-gui/./src/components/AudioSettings/AudioSettingsCard.tsx","webpack://modern-gui/./src/components/MainContent.tsx","webpack://modern-gui/./src/App.tsx","webpack://modern-gui/./src/components/Helpers/ParticleBackground.tsx","webpack://modern-gui/./src/components/Modals/WelcomeModal.tsx","webpack://modern-gui/./src/AppWrapper.tsx","webpack://modern-gui/./src/index.tsx","webpack://modern-gui/./src/scripts/useAudioConfig.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\n\r\nexport type AppGuiSetting = {\r\n    type: \"demo\",\r\n    front: {\r\n        \"modelSlotControl\": GuiComponentSetting[],\r\n    }\r\n}\r\n\r\nexport type GuiComponentSetting = {\r\n    \"name\": string,\r\n    \"options\": any\r\n}\r\n\r\nconst InitialAppGuiDemoSetting: AppGuiSetting = {\r\n    type: \"demo\",\r\n    front: {\r\n        \"modelSlotControl\": []\r\n    }\r\n}\r\n\r\nexport type AppGuiSettingState = {\r\n    appGuiSetting: AppGuiSetting\r\n    guiSettingLoaded: boolean\r\n    version: string\r\n    edition: string\r\n}\r\n\r\nexport type AppGuiSettingStateAndMethod = AppGuiSettingState & {\r\n    getAppGuiSetting: (url: string) => Promise<void>\r\n    clearAppGuiSetting: () => void\r\n}\r\n\r\nexport const useAppGuiSetting = (): AppGuiSettingStateAndMethod => {\r\n    const [guiSettingLoaded, setGuiSettingLoaded] = useState<boolean>(false)\r\n    const [appGuiSetting, setAppGuiSetting] = useState<AppGuiSetting>(InitialAppGuiDemoSetting)\r\n    const [version, setVersion] = useState<string>(\"\")\r\n    const [edition, setEdition] = useState<string>(\"\")\r\n    const getAppGuiSetting = async (url: string) => {\r\n        const res = await fetch(`${url}`, {\r\n            method: \"GET\",\r\n        })\r\n        const appSetting = await res.json() as AppGuiSetting\r\n        setAppGuiSetting(appSetting)\r\n        setGuiSettingLoaded(true)\r\n    }\r\n    const clearAppGuiSetting = () => {\r\n        setAppGuiSetting(InitialAppGuiDemoSetting)\r\n        setGuiSettingLoaded(false)\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getVersionInfo = async () => {\r\n            const res = await fetch('http://127.0.0.1:18888/version')\r\n            const version = await res.text()\r\n            setVersion(version)\r\n        }\r\n        getVersionInfo()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const getVersionInfo = async () => {\r\n            const res = await fetch('http://127.0.0.1:18888/edition')\r\n            const edition = await res.text()\r\n            setEdition(edition)\r\n        }\r\n        getVersionInfo()\r\n    }, [])\r\n\r\n    return {\r\n        appGuiSetting,\r\n        guiSettingLoaded,\r\n        version,\r\n        edition,\r\n        getAppGuiSetting,\r\n        clearAppGuiSetting,\r\n    }\r\n}\r\n","import { createContext, useContext, ReactNode } from \"react\";\r\nimport { AppGuiSettingStateAndMethod, useAppGuiSetting } from \"../scripts/useAppGuiSetting\";\r\nimport { AudioConfigState, useAudioConfig } from \"../scripts/useAudioConfig\";\r\n\r\ntype AppRootProviderProps = {\r\n    children: ReactNode;\r\n};\r\n\r\nexport type AppRootValue = {\r\n    audioContextState: AudioConfigState;\r\n    appGuiSettingState: AppGuiSettingStateAndMethod;\r\n    getGUISetting: () => Promise<void>;\r\n};\r\n\r\nconst AppRootContext = createContext<AppRootValue | null>(null);\r\n\r\nexport const useAppRoot = (): AppRootValue => {\r\n    const context = useContext(AppRootContext);\r\n    if (!context) {\r\n        throw new Error(\"useAppRoot must be used within an AppRootProvider\");\r\n    }\r\n    return context;\r\n};\r\n\r\nexport const AppRootProvider = ({ children }: AppRootProviderProps) => {\r\n    const audioContextState = useAudioConfig(); \r\n    const appGuiSettingState = useAppGuiSetting();\r\n\r\n    const getGUISetting = async () => {\r\n        await appGuiSettingState.getAppGuiSetting(`/assets/gui_settings/GUI.json`);\r\n    };\r\n\r\n    const providerValue: AppRootValue = {\r\n        audioContextState,\r\n        appGuiSettingState,\r\n        getGUISetting,\r\n    };\r\n\r\n    return <AppRootContext.Provider value={providerValue}>{children}</AppRootContext.Provider>;\r\n}; ","import React, { createContext, useState, useEffect, ReactNode, useContext } from 'react';\r\n\r\ninterface ThemeContextType {\r\n  theme: string;\r\n  toggleTheme: () => void;\r\n}\r\n\r\nexport const ThemeContext = createContext<ThemeContextType | undefined>(undefined);\r\n\r\nexport const useThemeContext = (): ThemeContextType => {\r\n  const state = useContext(ThemeContext);\r\n  if (!state) {\r\n      throw new Error(\"useAppState must be used within AppContextProvider\");\r\n  }\r\n  return state;\r\n};\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }) => {\r\n  const [theme, setTheme] = useState<string>(() => {\r\n    const storedTheme = localStorage.getItem('theme');\r\n    // Also check for system preference if no theme is stored\r\n    if (storedTheme) {\r\n      return storedTheme;\r\n    }\r\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n      return 'dark';\r\n    }\r\n    return 'light';\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('theme', theme);\r\n    if (theme === 'dark') {\r\n      document.documentElement.classList.add('dark');\r\n    } else {\r\n      document.documentElement.classList.remove('dark');\r\n    }\r\n  }, [theme]);\r\n\r\n  const toggleTheme = () => {\r\n    setTheme(prevTheme => (prevTheme === 'light' ? 'dark' : 'light'));\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}; ","import { ClientState, useClient } from \"@dannadori/voice-changer-client-js\"\n\nexport type UseVCClientProps = {\n    audioContext: AudioContext | null\n}\n\nexport type VCClientState = {\n    clientState: ClientState\n}\n\nexport const useVCClient = (props: UseVCClientProps): VCClientState => {\n    const clientState = useClient({\n        audioContext: props.audioContext\n    })\n\n    const ret: VCClientState = {\n        clientState\n    }\n\n\n    return ret\n\n}","import { ClientState } from \"@dannadori/voice-changer-client-js\";\r\nimport React, { useContext, useEffect, useRef } from \"react\";\r\nimport { ReactNode } from \"react\";\r\nimport { useVCClient } from \"../scripts/useVCClient\";\r\nimport { useAppRoot } from \"./AppRootProvider\";\r\n\r\ntype Props = {\r\n    children: ReactNode;\r\n};\r\n\r\nexport type AppContextValue = ClientState & {\r\n    audioContext: AudioContext;\r\n    initializedRef: React.MutableRefObject<boolean>;\r\n};\r\n\r\nconst AppStateContext = React.createContext<AppContextValue | null>(null);\r\nexport const useAppState = (): AppContextValue => {\r\n    const state = useContext(AppStateContext);\r\n    if (!state) {\r\n        throw new Error(\"useAppState must be used within AppContextProvider\");\r\n    }\r\n    return state;\r\n};\r\n\r\nexport const AppContextProvider = ({ children }: Props) => {\r\n    const appRoot = useAppRoot();\r\n    const clientState = useVCClient({ audioContext: appRoot.audioContextState.audioContext });\r\n    console.log(clientState);\r\n    const initializedRef = useRef<boolean>(false);\r\n    useEffect(() => {\r\n        if (clientState.clientState.initialized) {\r\n            initializedRef.current = true;\r\n            clientState.clientState.getInfo();\r\n            clientState.clientState.setWorkletNodeSetting({\r\n                ...clientState.clientState.setting.workletNodeSetting,\r\n                serverUrl: \"http://localhost:18888\",\r\n            });\r\n        }\r\n    }, [clientState.clientState.initialized]);\r\n    \r\n    const providerValue: AppContextValue = {\r\n        audioContext: appRoot.audioContextState.audioContext!,\r\n        ...clientState.clientState,\r\n        initializedRef,\r\n    };\r\n\r\n    return <AppStateContext.Provider value={providerValue}>{children}</AppStateContext.Provider>;\r\n};","import React from 'react';\n\ninterface LoadingScreenProps {\n  message?: string;\n}\n\nconst LoadingScreen: React.FC<LoadingScreenProps> = ({ message }) => (\n    <div className=\"fixed inset-0 bg-black bg-opacity-75 backdrop-blur-md flex flex-col justify-center items-center z-50 p-4\">\n    <div className=\"w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mb-4\"></div>\n    <p className=\"text-white text-lg font-semibold\">Loading...</p>\n    <p className=\"text-slate-300 text-sm\">{message}</p>\n  </div>\n);\n\nexport default LoadingScreen;","import React from 'react';\n\ntype ErrorType = 'Error' | 'Warning' | 'Confirm';\n\nexport interface UIError {\n  id: number;\n  message: string;\n  type: ErrorType;\n}\n\ninterface ErrorNotificationsProps {\n  errors: UIError[];\n  removeError: (id: number) => void;\n}\n\nconst ErrorNotifications: React.FC<ErrorNotificationsProps> = ({ errors, removeError }) => (\n  <div className=\"fixed top-4 right-4 space-y-2 z-50\">\n    {errors.map(err => (\n      <div\n        key={err.id}\n        className={`max-w-sm w-full p-4 rounded shadow flex justify-between items-start\n          ${err.type === 'Error' ? 'bg-red-100 border border-red-400' : ''}\n          ${err.type === 'Warning' ? 'bg-yellow-100 border border-yellow-400' : ''}\n          ${err.type === 'Confirm' ? 'bg-blue-100 border border-blue-400' : ''}`}\n      >\n        <div>\n          <strong className=\"block text-sm font-medium\">{err.type}</strong>\n          <p className=\"text-sm\">{err.message}</p>\n        </div>\n        <button\n          onClick={() => removeError(err.id)}\n          className=\"ml-4 text-lg font-bold leading-none\"\n        >\n          &times;\n        </button>\n      </div>\n    ))}\n  </div>\n);\n\nexport default ErrorNotifications;\n","import React, { createContext, ReactNode, useContext, useState, useRef, useCallback, useEffect } from 'react';\nimport LoadingScreen from '../components/Modals/LoadingScreen';\nimport ErrorNotifications from '../components/Modals/ErrorNotifications';\nimport { useAppState } from './AppContext';\n\ntype ErrorType = 'Error' | 'Warning' | 'Confirm';\n\ninterface UIError {\n  id: number;\n  message: string;\n  type: ErrorType;\n}\n\nexport interface UIContextType {\n  startLoading: (message?: string) => void;\n  stopLoading: () => void;\n  showError: (message: string, type?: ErrorType) => void;\n  setIsConverting: (isConverting: boolean) => void;\n  isConverting: boolean;\n\n  reloadDeviceInfo: () => Promise<void>;\n  inputAudioDeviceInfo: MediaDeviceInfo[];\n  outputAudioDeviceInfo: MediaDeviceInfo[];\n  audioInputForGUI: string;\n  audioOutputForGUI: string;\n  audioMonitorForGUI: string;\n  setAudioInputForGUI: (audioInputForGUI: string) => void;\n  setAudioOutputForGUI: (audioOutputForGUI: string) => void;\n  setAudioMonitorForGUI: (audioMonitorForGUI: string) => void;\n}\n\nconst UIContext = createContext<UIContextType | undefined>(undefined);\n\nexport const UIContextProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const appState = useAppState();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isConverting, setIsConverting] = useState<boolean>(false);\n  const [inputAudioDeviceInfo, setInputAudioDeviceInfo] = useState<MediaDeviceInfo[]>([]);\n  const [outputAudioDeviceInfo, setOutputAudioDeviceInfo] = useState<MediaDeviceInfo[]>([]);\n  const [audioInputForGUI, setAudioInputForGUI] = useState<string>(\"none\");\n  const [audioOutputForGUI, setAudioOutputForGUI] = useState<string>(\"none\");\n  const [audioMonitorForGUI, setAudioMonitorForGUI] = useState<string>(\"none\");\n\n  const [loadingMessage, setLoadingMessage] = useState<string>();\n  const [errors, setErrors] = useState<UIError[]>([]);\n  const idRef = useRef(0);\n\n  const startLoading = useCallback((message?: string) => {\n    setLoadingMessage(message);\n    setIsLoading(true);\n  }, []);\n\n  const stopLoading = useCallback(() => {\n    setIsLoading(false);\n    setLoadingMessage(undefined);\n  }, []);\n\n  const showError = useCallback((message: string, type: ErrorType = 'Error') => {\n    idRef.current += 1;\n    const id = idRef.current;\n    setErrors(prev => [...prev, { id, message, type }]);\n    setTimeout(() => {\n      setErrors(prev => prev.filter(err => err.id !== id));\n    }, 5000);\n  }, []);\n\n  const removeError = useCallback((id: number) => {\n    setErrors(prev => prev.filter(err => err.id !== id));\n  }, []);\n\n  const checkDeviceAvailable = useRef<boolean>(false);\n\n  const _reloadDeviceInfo = async () => {\n    // デバイスチェックの空振り\n    if (checkDeviceAvailable.current == false) {\n        try {\n            const ms = await navigator.mediaDevices.getUserMedia({ video: false, audio: true });\n            ms.getTracks().forEach((x) => {\n                x.stop();\n            });\n            checkDeviceAvailable.current = true;\n        } catch (e) {\n            console.warn(\"Enumerate device error:\", e);\n        }\n    }\n    const mediaDeviceInfos = await navigator.mediaDevices.enumerateDevices();\n\n    const audioInputs = mediaDeviceInfos.filter((x) => {\n        return x.kind == \"audioinput\";\n    });\n\n    const audioOutputs = mediaDeviceInfos.filter((x) => {\n      return x.kind == \"audiooutput\";\n    });\n    \n    return [audioInputs, audioOutputs];\n  };\n\n  const reloadDeviceInfo = async () => {\n    const audioInfo = await _reloadDeviceInfo();\n    setInputAudioDeviceInfo(audioInfo[0]);\n    setOutputAudioDeviceInfo(audioInfo[1]);\n  };\n\n  useEffect(() => {\n    if(appState.serverSetting.serverSetting.serverAudioStated == 1) {\n      setIsConverting(true);\n    }\n  }, [appState.serverSetting.serverSetting.serverAudioStated]);\n\n  useEffect(() => {\n    let isMounted = true;\n\n    const pollDevices = async () => {\n        const checkDeviceDiff = (knownDeviceIds: Set<string>, newDeviceIds: Set<string>) => {\n            const deleted = new Set([...knownDeviceIds].filter((x) => !newDeviceIds.has(x)));\n            const added = new Set([...newDeviceIds].filter((x) => !knownDeviceIds.has(x)));\n            return { deleted, added };\n        };\n        try {\n            const audioInfo = await _reloadDeviceInfo();\n\n            const knownAudioinputIds = new Set(inputAudioDeviceInfo.map((x) => x.deviceId));\n            const newAudioinputIds = new Set(audioInfo[0].map((x) => x.deviceId));\n\n            const knownAudiooutputIds = new Set(outputAudioDeviceInfo.map((x) => x.deviceId));\n            const newAudiooutputIds = new Set(audioInfo[1].map((x) => x.deviceId));\n\n            const audioInputDiff = checkDeviceDiff(knownAudioinputIds, newAudioinputIds);\n            const audioOutputDiff = checkDeviceDiff(knownAudiooutputIds, newAudiooutputIds);\n\n            if (audioInputDiff.deleted.size > 0 || audioInputDiff.added.size > 0) {\n                console.log(`deleted input device:`, [...audioInputDiff.deleted]);\n                console.log(`added input device:`, [...audioInputDiff.added]);\n                setInputAudioDeviceInfo(audioInfo[0]);\n            }\n            if (audioOutputDiff.deleted.size > 0 || audioOutputDiff.added.size > 0) {\n                console.log(`deleted output device:`, [...audioOutputDiff.deleted]);\n                console.log(`added output device:`, [...audioOutputDiff.added]);\n                setOutputAudioDeviceInfo(audioInfo[1]);\n            }\n\n            if (isMounted) {\n                setTimeout(pollDevices, 1000 * 3);\n            }\n        } catch (err) {\n            console.error(\"An error occurred during enumeration of devices:\", err);\n        }\n    };\n\n    pollDevices();\n    return () => {\n        isMounted = false;\n    };\n}, [inputAudioDeviceInfo, outputAudioDeviceInfo]);\n\n\n  return (\n    <UIContext.Provider value={{ \n      startLoading, stopLoading, showError, setIsConverting, reloadDeviceInfo, \n      isConverting, setAudioInputForGUI, setAudioOutputForGUI, setAudioMonitorForGUI,\n      inputAudioDeviceInfo, outputAudioDeviceInfo, audioInputForGUI, audioOutputForGUI, audioMonitorForGUI  }}>\n      {children}\n      {isLoading && <LoadingScreen message={loadingMessage} />}\n      <ErrorNotifications errors={errors} removeError={removeError} />\n    </UIContext.Provider>\n  );\n};\n\nexport const useUIContext = (): UIContextType => {\n  const context = useContext(UIContext);\n  if (!context) {\n    throw new Error('useUIContext must be used within a UIContextProvider');\n  }\n  return context;\n};\n","import { useMemo } from 'react';\r\n\r\nexport const useInitialPlaceholder = (name: string, options?: { size?: number; backgroundColor?: string; textColor?: string; shape?: string; fontSize?: number; fontFamily?: string }): string => {\r\n    return useMemo(() => {       \r\n        const {\r\n            size = 100,\r\n            backgroundColor = null, // null = auto-generiert\r\n            textColor = '#ffffff',\r\n            shape = 'rounded', // 'rounded', 'circle', 'square'\r\n            fontSize = null, // null = auto (size * 0.4)\r\n            fontFamily = 'Arial'\r\n        } = options || {}; // <- Das ist der wichtige Teil: || {}\r\n        \r\n        const initial = name.charAt(0).toUpperCase();\r\n        \r\n        // Auto-generierte Hintergrundfarbe wenn nicht angegeben\r\n        let bgColor = backgroundColor;\r\n        if (!bgColor) {\r\n            const hash = name.split('').reduce((a, b) => {\r\n                a = ((a << 5) - a) + b.charCodeAt(0);\r\n                return a & a;\r\n            }, 0);\r\n            const colors = ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8', '#6f42c1', '#e83e8c', '#fd7e14'];\r\n            bgColor = colors[Math.abs(hash) % colors.length];\r\n        }\r\n        \r\n        const calculatedFontSize = fontSize || size * 0.4;\r\n        \r\n        return `data:image/svg+xml;base64,${btoa(`\r\n            <svg width=\"${size}\" height=\"${size}\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <defs>\r\n                    <clipPath id=\"clip\">\r\n                        <rect width=\"${size}\" height=\"${size}\" rx=\"${shape === 'circle' ? size/2 : (shape === 'rounded' ? size * 0.1 : 0)}\" ry=\"${shape === 'circle' ? size/2 : (shape === 'rounded' ? size * 0.1 : 0)}\"/>\r\n                    </clipPath>\r\n                </defs>\r\n                <rect width=\"100%\" height=\"100%\" fill=\"${bgColor}\" clip-path=\"url(#clip)\"/>\r\n                <text x=\"50%\" y=\"50%\" font-family=\"${fontFamily}\" font-size=\"${calculatedFontSize}\" \r\n                      fill=\"${textColor}\" text-anchor=\"middle\" dy=\".3em\" clip-path=\"url(#clip)\">${initial}</text>\r\n            </svg>\r\n        `)}`;\r\n    }, [name, options]);\r\n};","import { RVCModelSlot } from \"@dannadori/voice-changer-client-js\";\r\nimport { faPen, faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useInitialPlaceholder } from \"../../scripts/usePlaceholder\";\r\n\r\ninterface ModelSlotProps {\r\n    selected: boolean;\r\n    model: RVCModelSlot;\r\n    modelDir: string;\r\n    handleSelectModel: (model: RVCModelSlot) => void;\r\n    openModal: (type: string, props?: { modelId?: string; modelName?: string; model?: RVCModelSlot }) => void;\r\n}\r\n\r\nfunction ModelSlot(props: ModelSlotProps) {\r\n    const icon = props.model.iconFile.length > 0 ? \"http://127.0.0.1:18888/\" + props.modelDir + \"/\" + props.model.slotIndex + \"/\" + props.model.iconFile.split(/[\\/\\\\]/).pop() : \"\";\r\n    const placeholder = useInitialPlaceholder(props.model.name);\r\n\r\n    return (\r\n        <li \r\n          className={`p-2.5 text-sm rounded-md cursor-pointer flex items-center group text-slate-700 dark:text-slate-300 \r\n                ${ props.selected\r\n                    ? 'bg-sky-100 dark:bg-blue-700/30 border border-blue-500' \r\n                    : 'hover:bg-slate-100 dark:hover:bg-gray-700'}`}\r\n          onClick={() => {\r\n              props.handleSelectModel(props.model);\r\n          }}\r\n        >\r\n          <img \r\n            src={icon.length > 0 ? icon : placeholder} \r\n            alt={props.model.name} \r\n            className=\"w-8 h-8 md:w-10 md:h-10 rounded-md mr-3 object-cover flex-shrink-0\"\r\n          />\r\n          <span className=\"truncate mr-2 flex-grow\">{props.model.name}</span> \r\n          <div className=\"flex space-x-2 md:space-x-1 items-center md:opacity-0 group-hover:md:opacity-100 transition-opacity\">\r\n            <button \r\n              onClick={(e) => { e.stopPropagation(); props.openModal('editModel', { model: props.model }); }}\r\n              className=\"text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 p-1 md:p-0\" \r\n              title=\"Edit Model\"\r\n            >\r\n              <FontAwesomeIcon icon={faPen} className=\"h-4 w-4 md:h-3 md:w-3\" /> \r\n            </button>\r\n            <button \r\n              onClick={(e) => { e.stopPropagation(); props.openModal('deleteModel', { model: props.model }); }}\r\n              className=\"text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 p-1 md:p-0\" \r\n              title=\"Delete Model\"\r\n            >\r\n              <FontAwesomeIcon icon={faTrash} className=\"h-4 w-4 md:h-3 md:w-3\"/> \r\n            </button>\r\n          </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ModelSlot","import ModelSlot from \"./ModelSlot\";\r\nimport { ClientState, RVCModelSlot } from \"@dannadori/voice-changer-client-js\";\r\n\r\ninterface ModelListProps {\r\n    filteredAndSortedModels: RVCModelSlot[];\r\n    openModal: (type: string, props?: { modelId?: string; modelName?: string; model?: RVCModelSlot }) => void;\r\n    handleSelectModel: (slot: RVCModelSlot) => Promise<void>;\r\n    confirmedSelectedSlotIndex: number | null;\r\n    appState: ClientState;\r\n}\r\n\r\nfunction ModelList({ filteredAndSortedModels, openModal, handleSelectModel, confirmedSelectedSlotIndex, appState }: ModelListProps) {  \r\n    return (\r\n        <>\r\n        <ul className=\"space-y-2 flex-grow overflow-y-auto min-h-[100px]\">\r\n            {filteredAndSortedModels.length > 0 ? (\r\n                filteredAndSortedModels.map(model => (\r\n                  <ModelSlot \r\n                    key={model.slotIndex} \r\n                    model={model} \r\n                    openModal={openModal} \r\n                    handleSelectModel={handleSelectModel} \r\n                    modelDir={appState.serverSetting.serverSetting.voiceChangerParams.model_dir}\r\n                    selected={model.slotIndex === confirmedSelectedSlotIndex} />\r\n                ))\r\n            ) : (\r\n                <p className=\"text-center text-sm text-slate-500 dark:text-gray-400 py-4\">No models match your criteria.</p>\r\n            )}\r\n        </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModelList;\r\n","export const CSS_CLASSES = {\r\n    // Form Controls\r\n    select: \"w-full p-2 border border-slate-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-slate-900 dark:text-gray-100 text-sm transition-colors duration-150\",\r\n    input: \"w-full p-2 border border-slate-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-slate-900 dark:text-gray-100 text-sm\",\r\n    range: \"w-full h-2 bg-slate-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer accent-blue-500 dark:accent-blue-400 transition-colors duration-150\",\r\n    rangeDisabled: \"w-full h-2 bg-slate-100 dark:bg-gray-700 rounded-lg appearance-none cursor-not-allowed accent-slate-300 dark:accent-gray-500 opacity-50 transition-colors duration-150\",\r\n    checkbox: \"mr-2 accent-blue-500 dark:accent-blue-400\",\r\n    radioButton: \"mr-2 accent-blue-500 dark:accent-blue-400\",\r\n    \r\n    // Typography\r\n    label: \"block text-sm font-medium text-slate-600 dark:text-gray-400 mt-1 mb-1\",\r\n    heading: \"text-lg font-semibold text-slate-700 dark:text-gray-200\",\r\n    sliderValue: \"text-xs text-slate-600 dark:text-gray-400 text-right\",\r\n    checkboxLabel: \"flex items-center text-sm text-slate-700 dark:text-gray-300\",\r\n    radioLabel: \"inline-flex items-center mr-4 text-sm text-slate-700 dark:text-gray-300\",\r\n    \r\n    // Buttons\r\n    iconButton: \"p-1 text-slate-500 hover:text-slate-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors duration-150\",\r\n    primaryButton: \"px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-150\",\r\n    modalPrimaryButton: \"px-4 py-2 rounded-md text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 bg-blue-500 hover:bg-blue-600 text-white rounded-md transition-colors duration-150\",\r\n    modalSecondaryButton: \"px-4 py-2 rounded-md text-sm font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 bg-slate-200 hover:bg-slate-300 text-slate-700 dark:bg-gray-600 dark:hover:bg-gray-500 dark:text-gray-200 focus:ring-slate-400\",\r\n\r\n    // Layout\r\n    card: \"p-4 border border-slate-200 dark:border-gray-700 rounded-md shadow-sm bg-white dark:bg-gray-800 transition-all duration-300\",\r\n    cardHeader: \"flex justify-between items-center mb-3 pb-2 border-b border-slate-200 dark:border-gray-700\",\r\n    \r\n    // States\r\n    error: \"p-2 mb-4 text-sm text-red-600 bg-red-50 dark:bg-red-900/20 dark:text-red-400 rounded\",\r\n    success: \"p-2 mb-4 text-sm text-green-600 bg-green-50 dark:bg-green-900/20 dark:text-green-400 rounded\",\r\n    warning: \"p-2 mb-4 text-sm text-yellow-600 bg-yellow-50 dark:bg-yellow-900/20 dark:text-yellow-400 rounded\",\r\n    loading: \"text-blue-500 animate-spin\"\r\n};\r\n\r\nexport const INDEXEDDB_KEYS = {\r\n  AUDIO_ELEMENT_FOR_PLAY_RESULT: \"audio-result\",\r\n  AUDIO_ELEMENT_FOR_PLAY_MONITOR: \"audio-monitor\",\r\n  AUDIO_ELEMENT_FOR_TEST_ORIGINAL: \"audio-test-original\",\r\n  AUDIO_ELEMENT_FOR_TEST_CONVERTED: \"audio-test-converted\",\r\n  AUDIO_ELEMENT_FOR_TEST_CONVERTED_ECHOBACK: \"audio-test-converted-echoback\",\r\n  AUDIO_ELEMENT_FOR_SAMPLING_INPUT: \"body-wav-container-wav-input\",\r\n  AUDIO_ELEMENT_FOR_SAMPLING_OUTPUT: \"body-wav-container-wav-output\",\r\n  INDEXEDDB_KEY_AUDIO_INPUT: \"INDEXEDDB_KEY_AUDIO_INPUT\",\r\n  INDEXEDDB_KEY_AUDIO_OUTPUT: \"INDEXEDDB_KEY_AUDIO_OUTPUT\",\r\n  INDEXEDDB_KEY_AUDIO_MONITOR: \"INDEXEDDB_KEY_AUDIO_MONITOR\",\r\n  INDEXEDDB_KEY_DEFAULT_MODEL_TYPE: \"INDEXEDDB_KEY_DEFALT_MODEL_TYPE\",\r\n  INDEXEDDB_KEY_NOISE1: \"INDEXEDDB_KEY_NOISE1\",\r\n  INDEXEDDB_KEY_NOISE2: \"INDEXEDDB_KEY_NOISE2\",\r\n  INDEXEDDB_KEY_ECHO: \"INDEXEDDB_KEY_ECHO\",\r\n}\r\n\r\nexport const isDesktopApp = () => {\r\n    if (navigator.userAgent.indexOf('Electron') >= 0) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n};","import { ClientState, ModelSlotUnion, RVCModelSlot, VoiceChangerType } from \"@dannadori/voice-changer-client-js\";\r\nimport { faFilter, faSearch, faSort, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { CSS_CLASSES } from \"../../styles/constants\";\r\n\r\ninterface ModelFilterProps {\r\n    appState: ClientState;\r\n    setFilteredAndSortedModels: (models: RVCModelSlot[]) => void;\r\n}\r\n\r\ntype SortOption = 'slot' | 'name';\r\ntype ModelTypeVersionFilter = string;\r\ntype SampleRateFilter = number | 'All';\r\ntype EmbedderFilter = string;\r\n\r\nconst sortOptions: { value: SortOption, label: string }[] = [\r\n    { value: 'slot', label: 'Slot' },\r\n    { value: 'name', label: 'Name' },\r\n];\r\n\r\nfunction ModelFilter({\r\n    appState,\r\n    setFilteredAndSortedModels\r\n}: ModelFilterProps) {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [currentSort, setCurrentSort] = useState<SortOption>('slot');\r\n  const [typeVersionFilter, setTypeVersionFilter] = useState<ModelTypeVersionFilter>('All');\r\n  const [rateFilter, setRateFilter] = useState<SampleRateFilter>('All');\r\n  const [embedderFilter, setEmbedderFilter] = useState<EmbedderFilter>('All');\r\n  const [isSortFilterVisible, setIsSortFilterVisible] = useState(false);\r\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\r\n\r\n  // Get RVC models from appState and filter them for local display and filtering\r\n  const localModels: RVCModelSlot[] = useMemo(() => {\r\n    if (appState.serverSetting?.serverSetting?.modelSlots) {\r\n      return appState.serverSetting.serverSetting.modelSlots\r\n        .filter((slot: ModelSlotUnion): slot is RVCModelSlot => \r\n            slot.voiceChangerType === VoiceChangerType.RVC &&\r\n            slot.name !== \"\" && \r\n            typeof slot.slotIndex === 'number'\r\n        )\r\n        .map((slot: RVCModelSlot): RVCModelSlot => ({\r\n          ...slot,\r\n          slotIndex: slot.slotIndex as number,\r\n        }));\r\n    }\r\n    return [];\r\n  }, [appState.serverSetting?.serverSetting?.modelSlots]);\r\n\r\n  // Dynamic options for filters (using localModels)\r\n  const modelTypeVersionOptions = useMemo(() => {\r\n    const types = new Set<string>();\r\n    localModels.forEach(model => {\r\n      if (model.voiceChangerType) {\r\n        types.add(`${model.voiceChangerType}`);\r\n      }\r\n    });\r\n    return ['All', ...Array.from(types).sort()];\r\n  }, [localModels]);\r\n\r\n  const sampleRateOptions = useMemo(() => {\r\n    const rates = new Set<number>();\r\n    localModels.forEach(model => {\r\n      if (model.samplingRate) {\r\n        rates.add(model.samplingRate);\r\n      }\r\n    });\r\n    return ['All' as SampleRateFilter, ...Array.from(rates).sort((a,b) => a-b)];\r\n  }, [localModels]);\r\n\r\n  const embedderOptions = useMemo(() => {\r\n    const embedders = new Set<string>();\r\n    localModels.forEach(model => {\r\n      if (model.embedder) {\r\n        embedders.add(model.embedder);\r\n      }\r\n    });\r\n    return ['All', ...Array.from(embedders).sort()];\r\n  }, [localModels]);\r\n\r\n  useEffect(() => {\r\n    let processedModels = [...localModels];\r\n\r\n    // Filter by search term\r\n    if (searchTerm) {\r\n      processedModels = processedModels.filter(model => \r\n        model.name.toLowerCase().includes(searchTerm.toLowerCase())\r\n      );\r\n    }\r\n\r\n    // Filter by type and version\r\n    if (typeVersionFilter !== 'All') {\r\n      processedModels = processedModels.filter(model => \r\n        model.voiceChangerType && model.version && `${model.voiceChangerType} ${model.version}` === typeVersionFilter\r\n      );\r\n    }\r\n\r\n    // Filter by sample rate\r\n    if (rateFilter !== 'All') {\r\n      processedModels = processedModels.filter(model => model.samplingRate === rateFilter);\r\n    }\r\n\r\n    // Filter by embedder\r\n    if (embedderFilter !== 'All') {\r\n      processedModels = processedModels.filter(model => model.embedder === embedderFilter);\r\n    }\r\n\r\n    // Sort\r\n    processedModels.sort((a, b) => {\r\n      let comparison = 0;\r\n      if (currentSort === 'slot') {\r\n        comparison = (a.slotIndex as number) - (b.slotIndex as number);\r\n      } else if (currentSort === 'name') {\r\n        comparison = a.name.localeCompare(b.name);\r\n      }\r\n      return sortDirection === 'asc' ? comparison : -comparison;\r\n    });\r\n\r\n    setFilteredAndSortedModels(processedModels);\r\n  }, [localModels, searchTerm, currentSort, typeVersionFilter, rateFilter, embedderFilter, sortDirection]);\r\n\r\n    return (\r\n        <>\r\n          <div className=\"relative mb-2\">\r\n            <input \r\n              type=\"search\" \r\n              placeholder=\"Search Models...\" \r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"w-full p-2 pr-10 border border-slate-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-sm placeholder-slate-400 dark:placeholder-gray-500 text-slate-700 dark:text-slate-100\"\r\n            />\r\n            <FontAwesomeIcon icon={faSearch} className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 dark:text-gray-500\" />\r\n          </div>\r\n\r\n          {/* Filter and Sort Toggle Button */}\r\n          <div className=\"mb-2\">\r\n            <button \r\n              onClick={() => setIsSortFilterVisible(!isSortFilterVisible)}\r\n              className=\"w-full flex items-center justify-between p-2 text-sm font-medium text-slate-700 dark:text-slate-200 hover:bg-slate-100 dark:hover:bg-gray-700 rounded-md border border-slate-300 dark:border-gray-600\"\r\n            >\r\n              <span><FontAwesomeIcon icon={faFilter} className=\"mr-2\" /> Filter & Sort</span>\r\n              <FontAwesomeIcon icon={isSortFilterVisible ? faTimes : faSort} />\r\n            </button>\r\n          </div>\r\n\r\n          {/* Filter and Sort Controls - Conditional Rendering */}\r\n          {isSortFilterVisible && (\r\n            <div className=\"space-y-3 mb-3 p-3 border border-slate-200 dark:border-gray-700 rounded-md\">\r\n              {/* Sort Controls */}\r\n              <div className=\"space-y-1 pb-2 border-b border-slate-200 dark:border-gray-700\">\r\n                <label htmlFor=\"sortOption\" className=\"text-xs font-medium text-slate-600 dark:text-gray-300 flex items-center\"><FontAwesomeIcon icon={faSort} className=\"mr-1.5\"/>Sort by:</label>\r\n                <div className=\"flex gap-2 items-center\">\r\n                    <select id=\"sortOption\" value={currentSort} onChange={(e) => setCurrentSort(e.target.value as SortOption)} className={`${CSS_CLASSES.select} flex-grow`}>\r\n                        {sortOptions.map(opt => <option key={opt.value} value={opt.value}>{opt.label}</option>)}\r\n                    </select>\r\n                    <button \r\n                        onClick={() => setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc')}\r\n                        className=\"p-1.5 border border-slate-300 dark:border-gray-600 rounded-md hover:bg-slate-50 dark:hover:bg-gray-600 text-slate-600 dark:text-gray-300\"\r\n                        title={sortDirection === 'asc' ? \"Sort Descending\" : \"Sort Ascending\"}\r\n                    >\r\n                        {sortDirection === 'asc' ? <span className=\"text-xs\">ASC</span> : <span className=\"text-xs\">DESC</span>} {/* Placeholder for actual icons if preferred */}\r\n                    </button>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Filter Controls */}\r\n              <div className=\"space-y-1 pt-2\">\r\n                <p className=\"text-xs font-medium text-slate-600 dark:text-gray-300 flex items-center mb-1\"><FontAwesomeIcon icon={faFilter} className=\"mr-1.5\"/>Filter by:</p>\r\n                <div className=\"grid grid-cols-2 gap-2 items-center\">\r\n                    <label htmlFor=\"typeVersionFilter\" className=\"text-xs font-medium text-slate-500 dark:text-gray-400\">Type:</label>\r\n                    <select id=\"typeVersionFilter\" value={typeVersionFilter} onChange={(e) => setTypeVersionFilter(e.target.value as ModelTypeVersionFilter)} className={CSS_CLASSES.select}>\r\n                        {modelTypeVersionOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-2 items-center\">\r\n                    <label htmlFor=\"rateFilter\" className=\"text-xs font-medium text-slate-500 dark:text-gray-400\">Rate:</label>\r\n                    <select id=\"rateFilter\" value={rateFilter === 'All' ? 'All' : rateFilter} onChange={(e) => setRateFilter(e.target.value === 'All' ? 'All' : Number(e.target.value) as SampleRateFilter)} className={CSS_CLASSES.select}>\r\n                        {sampleRateOptions.map(opt => <option key={opt} value={opt}>{opt === 'All' ? 'All' : `${opt/1000}kHz`}</option>)}\r\n                    </select>\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-2 items-center\"> {/* Added Embedder Filter */}\r\n                    <label htmlFor=\"embedderFilter\" className=\"text-xs font-medium text-slate-500 dark:text-gray-400\">Embedder:</label>\r\n                    <select id=\"embedderFilter\" value={embedderFilter} onChange={(e) => setEmbedderFilter(e.target.value as EmbedderFilter)} className={CSS_CLASSES.select}>\r\n                        {embedderOptions.map(opt => <option key={opt} value={opt}>{opt}</option>)}\r\n                    </select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModelFilter;","import { JSX, ReactNode } from 'react';\nimport { createPortal } from 'react-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { CSS_CLASSES } from '../../styles/constants';\n\ninterface ModalButton {\n  text: string;\n  onClick: () => void;\n  className?: string; // e.g., 'bg-blue-500 hover:bg-blue-600 text-white'\n  disabled?: boolean;\n}\n\ntype ModalSize = 'small' | 'medium' | 'large';\n\ninterface GenericModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  title: string;\n  children: ReactNode;\n  primaryButton?: ModalButton;\n  secondaryButton?: ModalButton;\n  transparent?: boolean;\n  closeOnOutsideClick?: boolean;\n  size?: ModalSize;\n}\n\nfunction GenericModal({\n  isOpen,\n  onClose,\n  title,\n  children,\n  primaryButton,\n  secondaryButton,\n  transparent = false,\n  closeOnOutsideClick = true,\n  size = 'medium'\n}: GenericModalProps): JSX.Element | null {\n  if (!isOpen) {\n    return null;\n  }\n\n  const modalRoot = document.getElementById('modal-root');\n  if (!modalRoot) {\n    return null;\n  }\n\n  // Define modal widths based on size\n  const getModalWidth = (size: ModalSize): string => {\n    switch (size) {\n      case 'small':\n        return 'max-w-md';\n      case 'medium':\n        return 'max-w-4xl';\n      case 'large':\n        return 'max-w-7xl';\n      default:\n        return 'max-w-4xl';\n    }\n  };\n\n  return createPortal(\n    <div className={`fixed inset-0 ${transparent === false ? 'bg-black bg-opacity-50 backdrop-blur-sm' : 'opacity-100'}  flex justify-center items-center z-50 p-4 transition-opacity duration-300 ease-in-out`} onClick={closeOnOutsideClick ? onClose : undefined}>\n      <div \n        className={`bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl w-full ${getModalWidth(size)} max-h-[90vh] flex flex-col transform transition-all duration-300 ease-in-out scale-95 opacity-0 animate-modalFadeInScaleUp overflow-hidden`}\n        onClick={(e) => e.stopPropagation()} // Prevent click inside modal from closing it\n      >\n        {/* Modal Header */}\n        <div className=\"flex justify-between items-center mb-4 pb-3 border-b border-slate-200 dark:border-gray-700\">\n          <h3 className=\"text-xl font-semibold text-slate-800 dark:text-gray-100\">{title}</h3>\n          <button\n            onClick={onClose}\n            className=\"text-slate-500 hover:text-slate-700 dark:text-gray-400 dark:hover:text-gray-200 p-1 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            aria-label=\"Close modal\"\n          >\n            <FontAwesomeIcon icon={faTimes} className=\"h-5 w-5\" />\n          </button>\n        </div>\n\n        {/* Modal Body */}\n        <div className=\"overflow-y-auto mb-6 flex-grow\">\n          {children}\n        </div>\n\n        {/* Modal Footer (optional buttons) */}\n        {(primaryButton || secondaryButton) && (\n          <div className=\"flex justify-end space-x-3 pt-3 border-t border-slate-200 dark:border-gray-700\">\n            {secondaryButton && (\n              <button\n                onClick={secondaryButton.onClick}\n                className={`${CSS_CLASSES.modalSecondaryButton} ${secondaryButton.className || ''} ${secondaryButton.disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n                disabled={secondaryButton.disabled}\n              >\n                {secondaryButton.text}\n              </button>\n            )}\n            {primaryButton && (\n              <button\n                onClick={primaryButton.onClick}\n                className={`${CSS_CLASSES.modalPrimaryButton} ${primaryButton.className || ''} ${primaryButton.disabled ? 'opacity-50 cursor-not-allowed' : ''}`}\n                disabled={primaryButton.disabled}\n              >\n                {primaryButton.text}\n              </button>\n            )}\n          </div>\n        )}\n      </div>\n    </div>,\n    modalRoot\n  );\n}\n\nexport default GenericModal; ","import { useState, ChangeEvent, useEffect } from 'react';\nimport { ClientState, ModelFileKind, ModelSlot, ModelUploadSetting } from '@dannadori/voice-changer-client-js';\nimport { CSS_CLASSES } from '../../../styles/constants';\nimport GenericModal from '../../Modals/GenericModal';\nimport { UIContextType } from '../../../context/UIContext';\n\nexport interface UploadFinalForm extends ModelUploadSetting {\n  modelName: string \n  thumbnailFile: File | null  \n  embedder: string\n}\n\ninterface UploadModelModalProps {\n  appState: ClientState\n  guiState: UIContextType\n  showUpload: boolean\n  setShowUpload: (showUpload: boolean) => void\n}\n\nfunction UploadModelModal({ appState, guiState, showUpload, setShowUpload }: UploadModelModalProps) {\n  const [uploadSettings, setUploadSettings] = useState<UploadFinalForm>({ modelName: '', thumbnailFile: null, voiceChangerType: 'RVC', slot: 0, isSampleMode: false, sampleId: null, files: [], params: {}, embedder: 'hubert_base' });\n\n  const [thumbnailPreview, setThumbnailPreview] = useState<string | null>(null);\n  const [isThumbnailExpanded, setIsThumbnailExpanded] = useState(false);\n  const [previewMode, setPreviewMode] = useState<'settings' | 'list'>('settings');\n\n  useEffect(() => {\n    // Automatically set model name from file name if modelName is empty and modelFile is selected\n    const model = uploadSettings.files.find(x => x.kind === \"rvcModel\")\n    if (model) {\n      const baseName = model.file.name.substring(0, model.file.name.lastIndexOf('.'));\n      setUploadSettings({ ...uploadSettings, modelName: baseName });\n    }\n    // Auto-expand thumbnail preview when a new thumbnail is selected and preview is available\n    if (thumbnailPreview) {\n        setIsThumbnailExpanded(true);\n    }\n\n  }, [uploadSettings.files]); // Dependencies for this effect\n \n  const handleModelFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      const newFile = { kind: \"rvcModel\" as ModelFileKind, file: file, dir: \"\" };\n      \n      const updatedFiles = uploadSettings.files.filter(f => f.kind !== \"rvcModel\");\n      updatedFiles.push(newFile);\n      \n      setUploadSettings({ \n        ...uploadSettings, \n        files: updatedFiles,\n        modelName: file.name.replace(/\\.[^/.]+$/, '') \n      });\n    } else {\n      const updatedFiles = uploadSettings.files.filter(f => f.kind !== \"rvcModel\");\n      \n      setUploadSettings({ \n        ...uploadSettings, \n        files: updatedFiles,\n        modelName: '' \n      });\n    }\n  };\n  \n  const handleIndexFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const newFile = { kind: \"rvcIndex\" as ModelFileKind, file: event.target.files[0], dir: \"\" };\n      \n      const updatedFiles = uploadSettings.files.filter(f => f.kind !== \"rvcIndex\");\n      updatedFiles.push(newFile);\n      \n      setUploadSettings({ \n        ...uploadSettings, \n        files: updatedFiles \n      });\n    } else {\n      const updatedFiles = uploadSettings.files.filter(f => f.kind !== \"rvcIndex\");\n      \n      setUploadSettings({ \n        ...uploadSettings, \n        files: updatedFiles \n      });\n    }\n  };\n\n  const handleThumbnailFileChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      const file = event.target.files[0];\n      setUploadSettings({ ...uploadSettings, thumbnailFile: file });\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setThumbnailPreview(reader.result as string);\n      };\n      reader.readAsDataURL(file);\n    } else {\n      setUploadSettings({ ...uploadSettings, thumbnailFile: null });\n      setThumbnailPreview(null);\n    }\n  };\n\n  const handleUploadCloseModal = () => {\n    if(!appState.serverSetting.isUploading) {\n      setShowUpload(false);\n      setUploadSettings({ modelName: '', thumbnailFile: null, voiceChangerType: 'RVC', slot: 0, isSampleMode: false, sampleId: null, files: [], params: {}, embedder: 'hubert_base' });\n    }\n  };\n\n  const handleUploadModal = async () => {\n    console.log(uploadSettings);\n    if (!uploadSettings.files) {\n      guiState.showError('Please select a model file.', \"Error\");\n      return;\n    }\n    const trimmedModelName = uploadSettings.modelName.trim();\n    if (!trimmedModelName) {\n      guiState.showError('Please enter a model name.', \"Error\");\n      return;\n    }\n\n    //appState.serverSetting.isUploading setIsUploading(true);\n\n    try {\n      let emptySlotIndex = -1;\n      const currentModelSlots = appState.serverSetting.serverSetting.modelSlots;\n\n      if (currentModelSlots && currentModelSlots.length > 0) {\n        emptySlotIndex = currentModelSlots.findIndex((slot: ModelSlot) => !slot.name || slot.name.length === 0);\n        if (emptySlotIndex === -1) {\n          console.warn(\"No slot with an empty name found. Prioritizing slots with no name.\");\n        }\n      }\n      if (emptySlotIndex === -1) {\n        guiState.showError('No empty model slot available. Please clear a slot or manage existing ones.', \"Error\");\n        return;\n      }\n\n      const filesForUpload: { kind: ModelFileKind; file: File; dir: string }[] = [\n        { kind: \"rvcModel\" as ModelFileKind, file: uploadSettings.files[0].file, dir: \"\" },\n      ];\n\n      if (uploadSettings.files[1]) {\n        filesForUpload.push({ kind: \"rvcIndex\" as ModelFileKind, file: uploadSettings.files[1].file, dir: \"\" });\n      }\n\n      const uploadSettingsData: ModelUploadSetting & { embedder: string } = {\n        voiceChangerType: \"RVC\",\n        slot: emptySlotIndex,\n        files: filesForUpload,\n        isSampleMode: false,\n        sampleId: null,\n        params: {},\n        embedder: uploadSettings.embedder\n      };\n\n      console.log('Uploading model with settings:', uploadSettingsData);\n      await appState.serverSetting.uploadModel(uploadSettingsData);\n      console.log('Model uploaded successfully.');\n\n      if (uploadSettings.thumbnailFile) {\n        console.log(`Uploading icon to slot ${emptySlotIndex}...`);\n        await appState.serverSetting.uploadAssets(emptySlotIndex, \"iconFile\", uploadSettings.thumbnailFile);\n        console.log('Icon uploaded.');\n      }\n\n      guiState.showError(\"Model uploaded successfully!\", \"Confirm\");\n      await appState.serverSetting.reloadServerInfo();\n      handleUploadCloseModal();\n    } catch (error) {\n      console.error('Error uploading model:', error);\n      guiState.showError(`Error uploading model: ${error instanceof Error ? error.message : String(error)}`, \"Error\");\n    }\n  };\n\n  const commonLabelClass = \"block text-sm font-medium text-slate-600 dark:text-gray-400 mb-1\";\n  const commonSelectClass = \"w-full p-2 border border-slate-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-slate-900 dark:text-gray-100 text-sm transition-colors duration-150\";\n  const commonInputClass = \"w-full p-2 border border-slate-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-slate-900 dark:text-gray-100 text-sm transition-colors duration-150\";\n  const commonFileInputClass = `${commonInputClass} file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 dark:file:bg-gray-600 file:text-blue-700 dark:file:text-blue-300 hover:file:bg-blue-100 dark:hover:file:bg-gray-500`;\n\n  return (\n    <GenericModal \n      isOpen={showUpload} \n      onClose={handleUploadCloseModal} \n      title=\"Upload Model\"\n      closeOnOutsideClick={false}\n      primaryButton={{\n        text: `${appState.serverSetting.isUploading ? `Uploading... (${appState.serverSetting.uploadProgress.toFixed(1)}%)` : 'Upload'}`,\n        onClick: handleUploadModal,\n        className: CSS_CLASSES.modalPrimaryButton,\n        disabled: appState.serverSetting.isUploading\n      }}\n      secondaryButton={\n        {\n          text: \"Cancel\",\n          onClick: handleUploadCloseModal,\n          className: CSS_CLASSES.modalSecondaryButton,\n          disabled: appState.serverSetting.isUploading\n        }\n      }\n    >\n      <div className=\"space-y-4 py-2 max-h-[70vh] overflow-y-auto pr-2\">\n        <div>\n          <label htmlFor=\"modelFile\" className={commonLabelClass}>Model File (.pth, .safetensors, .onnx):</label>\n          <input\n            type=\"file\"\n            id=\"modelFile\"\n            accept=\".pth,.safetensors,.onnx\"\n            onChange={handleModelFileChange}\n            className={commonFileInputClass}\n            disabled={appState.serverSetting.isUploading}\n          />\n        </div>\n\n        {uploadSettings.files.find(x => x.kind === \"rvcModel\") && (\n          <div className=\"space-y-4 ml-2 pl-3 border-l-2 border-slate-200 dark:border-gray-700\">\n            <div className=\"space-y-2\">\n              <label htmlFor=\"modelName\" className={commonLabelClass}>Model Name:</label>\n              <div className=\"relative\">\n                <input\n                  type=\"text\"\n                  id=\"modelName\"\n                  value={uploadSettings.modelName}\n                  onChange={(e) => setUploadSettings({ ...uploadSettings, modelName: e.target.value })}\n                  className={`${commonInputClass} pl-3 pr-10 py-2 bg-white/50 dark:bg-gray-700/50 border-slate-300/70 dark:border-gray-600/70 focus:ring-2 focus:ring-blue-500/50 focus:border-transparent text-sm`}\n                  placeholder=\"Enter a descriptive name for your model\"\n                  disabled={appState.serverSetting.isUploading}\n                />\n                <div className=\"absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none\">\n                  <svg className=\"h-4 w-4 text-slate-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\n                  </svg>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"space-y-2\">\n              <label htmlFor=\"embedderType\" className={commonLabelClass}>Embedder Type:</label>\n              <select\n                id=\"embedderType\"\n                value={uploadSettings.embedder}\n                onChange={(e) => setUploadSettings({ ...uploadSettings, embedder: e.target.value as 'hubert_base' | 'spin_base' })}\n                className={commonSelectClass}\n                disabled={appState.serverSetting.isUploading}\n              >\n                <option value=\"hubert_base\">Hubert_Base / Contentvec (Default)</option>\n                <option value=\"spin_base\">SPIN</option>\n              </select>\n            </div>\n          </div>\n        )}\n\n        <div>\n          <label htmlFor=\"indexFile\" className={commonLabelClass}>Index File (.index) (Optional):</label>\n          <input\n            type=\"file\"\n            id=\"indexFile\"\n            accept=\".index\"\n            onChange={handleIndexFileChange}\n            className={commonFileInputClass}\n            disabled={appState.serverSetting.isUploading}\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"thumbnailFile\" className={commonLabelClass}>Thumbnail Image (Optional):</label>\n          <input\n            type=\"file\"\n            id=\"thumbnailFile\"\n            accept=\"image/*\"\n            onChange={handleThumbnailFileChange}\n            className={commonFileInputClass}\n            disabled={appState.serverSetting.isUploading}\n          />\n        </div>\n\n        {thumbnailPreview && (\n          <div className=\"space-y-3\">\n            <button \n              type=\"button\" \n              onClick={() => setIsThumbnailExpanded(!isThumbnailExpanded)}\n              className=\"flex items-center justify-between w-full text-sm font-medium text-slate-600 dark:text-gray-400 hover:text-blue-600 dark:hover:text-blue-400 transition-colors disabled:opacity-50\"\n              disabled={appState.serverSetting.isUploading}\n            >\n              <span>Preview Thumbnail</span>\n              <svg \n                className={`ml-2 h-4 w-4 transition-transform duration-200 ${isThumbnailExpanded ? 'rotate-180' : ''}`} \n                fill=\"none\" \n                viewBox=\"0 0 24 24\" \n                stroke=\"currentColor\"\n              >\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            </button>\n            \n            {isThumbnailExpanded && (\n              <div className=\"space-y-4 p-3 bg-slate-50 dark:bg-gray-800/30 rounded-lg border border-slate-200 dark:border-gray-700\">\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm font-medium text-slate-600 dark:text-gray-300\">Preview Mode:</span>\n                  <div className=\"flex space-x-2\">\n                    <button\n                      type=\"button\"\n                      onClick={(e) => { e.stopPropagation(); setPreviewMode('settings'); }}\n                      className={`px-3 py-1 text-xs rounded-md transition-colors ${previewMode === 'settings' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/50 dark:text-blue-300' : 'text-slate-500 hover:bg-slate-100 dark:text-gray-400 dark:hover:bg-gray-700'} disabled:opacity-50`}\n                      disabled={appState.serverSetting.isUploading}\n                    >\n                      Settings\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={(e) => { e.stopPropagation(); setPreviewMode('list'); }}\n                      className={`px-3 py-1 text-xs rounded-md transition-colors ${previewMode === 'list' ? 'bg-blue-100 text-blue-700 dark:bg-blue-900/50 dark:text-blue-300' : 'text-slate-500 hover:bg-slate-100 dark:text-gray-400 dark:hover:bg-gray-700'} disabled:opacity-50`}\n                      disabled={appState.serverSetting.isUploading}\n                    >\n                      List\n                    </button>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-center p-4\">\n                  <div className={`transition-all duration-200 ${\n                    previewMode === 'settings' \n                      ? 'w-32 h-32 rounded-full p-1.5 border-2 border-slate-300 dark:border-gray-500' \n                      : 'w-36 h-36 rounded-xl p-1.5 border border-slate-300 dark:border-gray-500'\n                  } bg-white dark:bg-gray-800 shadow-md overflow-hidden`}>\n                    <img \n                      src={thumbnailPreview} \n                      alt=\"Thumbnail preview\" \n                      className={`w-full h-full object-cover ${\n                        previewMode === 'settings' ? 'rounded-full' : 'rounded-lg'\n                      }`}\n                    />\n                  </div>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </GenericModal>\n  );\n};\n\nexport default UploadModelModal;","import { JSX, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport { RVCModelSlot } from '@dannadori/voice-changer-client-js';\nimport { useAppState } from '../../context/AppContext';\nimport { useUIContext } from '../../context/UIContext';\nimport ModelList from './ModelList';\nimport ModelFilter from './ModelFilter';\nimport UploadModelModal from './Modals/UploadModelModal';\n\ninterface LeftSidebarProps {\n  isSidebarOpen: boolean;\n  toggleSidebar: () => void;\n  openModal: (type: string, props?: { modelId?: string; modelName?: string; model?: RVCModelSlot }) => void;\n}\n\nfunction LeftSidebar({\n  isSidebarOpen,\n  toggleSidebar,\n  openModal\n}: LeftSidebarProps): JSX.Element | null {\n  const appState = useAppState();\n  const guiState = useUIContext();\n\n  const [showUpload, setShowUpload] = useState<boolean>(false);  \n  const [filteredAndSortedModels, setFilteredAndSortedModels] = useState<RVCModelSlot[]>([]);\n\n  const handleSelectModel = async (slot: RVCModelSlot) => {\n    guiState.startLoading(`Swapping to model: ${slot.name}`);\n    await appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, modelSlotIndex: slot.slotIndex });\n    guiState.stopLoading();\n  };\n\n  // The actual selected model ID from the global context\n  const confirmedSelectedSlotIndex = appState.serverSetting?.serverSetting?.modelSlotIndex ?? null;\n\n  // Base classes for the sidebar\n  let sidebarClasses = \"bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-200 p-4 space-y-4 transition-all duration-300 ease-in-out flex flex-col\";\n\n  // Classes for different states\n  if (isSidebarOpen) {\n    // Full width on small screens (overlay), fixed width on medium and up\n    sidebarClasses += \" w-full md:w-72 z-10\"; \n  } else {\n    sidebarClasses += \" w-0 p-0 overflow-hidden\"; // Collapsed state\n  }\n \n  let finalSidebarClasses = `bg-white dark:bg-gray-800 text-slate-700 dark:text-gray-200 border-r border-slate-200 dark:border-gray-700 p-4 space-y-4 transition-all duration-300 ease-in-out flex flex-col z-20 `;\n\n  if (isSidebarOpen) {\n    finalSidebarClasses += 'fixed inset-y-0 left-0 w-full transform translate-x-0 md:static md:w-72 md:translate-x-0';\n  } else {\n    finalSidebarClasses += 'fixed -left-full w-full transform -translate-x-full md:static md:w-0 md:p-0 md:overflow-hidden md:border-r-0'; // Remove border when closed on desktop\n  }\n\n  return (\n    // Use finalSidebarClasses which correctly handles fixed/static and open/closed states\n    <div className={finalSidebarClasses}>\n      {/* Logo and Close button container */}\n      <div className={`flex items-center mb-2 md:mb-0 justify-center relative`}>\n        {/* Logo - Conditionally apply mx-auto for centering only when sidebar is open and on small screens (mobile overlay) */}\n        {isSidebarOpen && (\n          <img \n            src={process.env.PUBLIC_URL + '/logo.png'} \n            alt=\"Logo\" \n            className={`h-10 md:h-12 ${isSidebarOpen ? 'mx-auto md:mx-0' : 'mx-auto'}`} \n          />\n        )}\n        {/* Close button for mobile overlay - only shown if sidebar is open on mobile */}\n        {isSidebarOpen && (\n            <button \n              onClick={toggleSidebar} \n              className={`md:hidden p-2 text-slate-600 dark:text-gray-300 self-start absolute top-0 right-0 z-10`} \n              aria-label=\"Close sidebar\"\n            >\n              <FontAwesomeIcon icon={faTimes} size=\"lg\" />\n            </button>\n        )}\n      </div>\n\n      {isSidebarOpen && <hr className=\"hidden md:block border-slate-300 dark:border-gray-600 my-3\" />}\n\n      <h3 className={`text-xl font-semibold text-slate-800 dark:text-gray-100 ${isSidebarOpen ? 'mt-2 md:mt-0 text-center md:text-left' : 'mt-0 hidden'}`}>Model Selector</h3>\n      \n      {/* Render search and list only if sidebar is open to prevent layout shifts/errors when collapsed to w-0 */}\n      {isSidebarOpen && (\n        <>\n          <UploadModelModal \n            appState={appState} \n            guiState={guiState} \n            showUpload={showUpload} \n            setShowUpload={setShowUpload} \n          />\n\n          <div className=\"flex justify-between items-center mb-2\">\n              <span className={`text-sm font-medium text-slate-600 dark:text-gray-400`}>Available Models ({filteredAndSortedModels.length})</span>\n              <button \n                  onClick={() => setShowUpload(true)} \n                  className=\"p-1 text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300\" \n                  title=\"Upload New Model\"\n              >\n              <FontAwesomeIcon icon={faPlus} size=\"lg\" />\n              </button>\n          </div>\n\n          <ModelFilter \n            appState={appState}\n            setFilteredAndSortedModels={setFilteredAndSortedModels}\n          />\n\n          <hr className=\"border-slate-300 dark:border-gray-600 my-2\" />\n\n          <ModelList  \n            filteredAndSortedModels={filteredAndSortedModels}\n            openModal={openModal}\n            handleSelectModel={handleSelectModel}\n            confirmedSelectedSlotIndex={confirmedSelectedSlotIndex}\n            appState={appState}\n          />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default LeftSidebar; ","import { JSX } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFilter } from '@fortawesome/free-solid-svg-icons';\r\nimport { CSS_CLASSES } from '../../../../styles/constants';\r\n\r\ninterface MergeFilterProps {\r\n  sampleRate: number;\r\n  setSampleRate: (sampleRate: number) => void;\r\n  embedder: string;\r\n  setEmbedder: (embedder: string) => void;\r\n  searchText: string;\r\n  setSearchText: (searchText: string) => void;\r\n  onFilterChange: () => void;\r\n}\r\n\r\nfunction MergeFilter({ \r\n  sampleRate, \r\n  setSampleRate, \r\n  embedder, \r\n  setEmbedder, \r\n  searchText, \r\n  setSearchText,\r\n  onFilterChange \r\n}: MergeFilterProps): JSX.Element {\r\n  const sampleRates = [32000, 40000, 48000];\r\n\r\n  const handleSampleRateChange = (newSampleRate: number) => {\r\n    setSampleRate(newSampleRate);\r\n    onFilterChange();\r\n  };\r\n\r\n  const handleEmbedderChange = (newEmbedder: string) => {\r\n    setEmbedder(newEmbedder);\r\n    onFilterChange();\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4 p-4 bg-slate-50 dark:bg-gray-800/30 rounded-lg border border-slate-200 dark:border-gray-700\">\r\n      <div className=\"flex justify-between items-center mb-3\">\r\n        <h4 className=\"text-md font-medium text-slate-700 dark:text-gray-200\">Filter Settings</h4>\r\n        <FontAwesomeIcon \r\n          icon={faFilter} \r\n          className=\"h-4 w-4 text-slate-500 dark:text-gray-400\" \r\n        />\r\n      </div>\r\n      \r\n      <div className=\"space-y-4\">\r\n        <div>\r\n          <label className={CSS_CLASSES.label}>Search Models:</label>\r\n          <input\r\n            type=\"text\"\r\n            value={searchText}\r\n            onChange={(e) => setSearchText(e.target.value)}\r\n            placeholder=\"Search by model name...\"\r\n            className={CSS_CLASSES.input}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <label className={CSS_CLASSES.label}>Sample Rate:</label>\r\n            <select\r\n              value={sampleRate}\r\n              onChange={(e) => handleSampleRateChange(Number(e.target.value))}\r\n              className={CSS_CLASSES.select}\r\n            >\r\n              {sampleRates.map((rate) => (\r\n                <option key={rate} value={rate}>\r\n                  {rate} Hz\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n\r\n          <div>\r\n            <label className={CSS_CLASSES.label}>Embedder:</label>\r\n            <select\r\n              value={embedder}\r\n              onChange={(e) => handleEmbedderChange(e.target.value)}\r\n              className={CSS_CLASSES.select}\r\n            >\r\n              <option value=\"hubert_base\">Hubert_Base / Contentvec</option>\r\n              <option value=\"spin_base\">SPIN</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergeFilter;","import { JSX } from 'react';\r\nimport { RVCModelSlot } from '@dannadori/voice-changer-client-js';\r\nimport { CSS_CLASSES } from '../../../../styles/constants';\r\n\r\ninterface ModelMergeInfo {\r\n  slot: RVCModelSlot;\r\n  percentage: number;\r\n}\r\n\r\ninterface MergeModelListProps {\r\n  models: RVCModelSlot[];\r\n  selectedModels: ModelMergeInfo[];\r\n  onModelToggle: (slot: RVCModelSlot) => void;\r\n  onPercentageChange: (slotIndex: number, percentage: number) => void;\r\n  modelDir: string;\r\n}\r\n\r\nfunction MergeModelList({ models, selectedModels, onModelToggle, onPercentageChange, modelDir }: MergeModelListProps): JSX.Element {\r\n  const isModelSelected = (slot: RVCModelSlot) => {\r\n    return selectedModels.some(m => m.slot.slotIndex === slot.slotIndex);\r\n  };\r\n\r\n  const getModelPercentage = (slot: RVCModelSlot) => {\r\n    const found = selectedModels.find(m => m.slot.slotIndex === slot.slotIndex);\r\n    return found ? found.percentage : 50;\r\n  };\r\n\r\n  // Generate placeholder without using hook (inline SVG generation)\r\n  const generatePlaceholder = (name: string): string => {\r\n    const initial = name.charAt(0).toUpperCase();\r\n    const hash = name.split('').reduce((a, b) => {\r\n      a = ((a << 5) - a) + b.charCodeAt(0);\r\n      return a & a;\r\n    }, 0);\r\n    const colors = ['#007bff', '#28a745', '#dc3545', '#ffc107', '#17a2b8', '#6f42c1', '#e83e8c', '#fd7e14'];\r\n    const bgColor = colors[Math.abs(hash) % colors.length];\r\n    \r\n    return `data:image/svg+xml;base64,${btoa(`\r\n      <svg width=\"32\" height=\"32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <rect width=\"100%\" height=\"100%\" fill=\"${bgColor}\" rx=\"3.2\"/>\r\n        <text x=\"50%\" y=\"50%\" font-family=\"Arial\" font-size=\"12.8\" \r\n              fill=\"#ffffff\" text-anchor=\"middle\" dy=\".3em\">${initial}</text>\r\n      </svg>\r\n    `)}`;\r\n  };\r\n\r\n  const handleModelCardClick = (model: RVCModelSlot) => {\r\n    const isSelected = isModelSelected(model);\r\n    if (!isSelected) {\r\n      onModelToggle(model);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      <h4 className=\"text-md font-medium text-slate-700 dark:text-gray-200\">Available Models</h4>\r\n      \r\n      {models.length === 0 ? (\r\n        <div className=\"text-center py-8 text-slate-500 dark:text-gray-400\">\r\n          <p>No models match the current filter criteria.</p>\r\n        </div>\r\n      ) : (\r\n        <div className=\"space-y-2\">\r\n          {models.map((model) => {\r\n            const isSelected = isModelSelected(model);\r\n            const percentage = getModelPercentage(model);\r\n            const icon = model.iconFile.length > 0 ? \"http://127.0.0.1:18888/\" + modelDir + \"/\" + model.slotIndex + \"/\" + model.iconFile.split(/[\\/\\\\]/).pop() : \"\";\r\n            const placeholder = generatePlaceholder(model.name);\r\n            \r\n            return (\r\n              <div\r\n                key={model.slotIndex}\r\n                className={`p-3 rounded-lg border transition-all duration-150 ${\r\n                  isSelected\r\n                    ? 'bg-blue-50 dark:bg-blue-900/20 border-blue-200 dark:border-blue-700'\r\n                    : 'bg-white dark:bg-gray-800 border-slate-200 dark:border-gray-700 hover:bg-slate-50 dark:hover:bg-gray-700/50 cursor-pointer'\r\n                }`}\r\n                onClick={() => handleModelCardClick(model)}\r\n              >\r\n                <div className=\"flex items-center justify-between mb-2\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      checked={isSelected}\r\n                      onChange={(e) => {\r\n                        e.stopPropagation();\r\n                        onModelToggle(model);\r\n                      }}\r\n                      className={CSS_CLASSES.checkbox}\r\n                    />\r\n                    <img \r\n                      src={icon.length > 0 ? icon : placeholder} \r\n                      alt={model.name} \r\n                      className=\"w-8 h-8 rounded-md object-cover flex-shrink-0\"\r\n                    />\r\n                    <div>\r\n                      <div className=\"font-medium text-slate-800 dark:text-gray-200\">\r\n                        {model.name || `Model ${model.slotIndex}`}\r\n                      </div>\r\n                      <div className=\"text-xs text-slate-500 dark:text-gray-400\">\r\n                        {model.embedder || 'Unknown'} • {model.samplingRate || 'Unknown'} Hz • {model.voiceChangerType || 'RVC'}{model.version || '1'}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  {isSelected && (\r\n                    <div className=\"text-sm font-medium text-blue-600 dark:text-blue-400 ml-2\">\r\n                      {percentage}%\r\n                    </div>\r\n                  )}\r\n                </div>\r\n                \r\n                {isSelected && (\r\n                  <div className=\"mt-3\">\r\n                    <input\r\n                      type=\"range\"\r\n                      min=\"0\"\r\n                      max=\"100\"\r\n                      value={percentage}\r\n                      onChange={(e) => onPercentageChange(model.slotIndex, Number(e.target.value))}\r\n                      className={CSS_CLASSES.range}\r\n                    />\r\n                    <div className=\"flex justify-between text-xs text-slate-500 dark:text-gray-400 mt-1 relative\">\r\n                      <span>0%</span>\r\n                      <span className=\"absolute left-1/2 transform -translate-x-1/2\">50%</span>\r\n                      <span>100%</span>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      \r\n      {selectedModels.length > 0 && (\r\n        <div className=\"pt-3 border-t border-slate-200 dark:border-gray-700\">\r\n          <div className=\"text-sm text-slate-600 dark:text-gray-400\">\r\n            Selected models: {selectedModels.length}\r\n          </div>\r\n          <div className=\"text-xs text-slate-500 dark:text-gray-500 mt-1\">\r\n            Total weight: {selectedModels.reduce((sum, m) => sum + m.percentage, 0)}%\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergeModelList;","import { JSX } from 'react';\r\nimport { RVCModelSlot } from '@dannadori/voice-changer-client-js';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCog } from '@fortawesome/free-solid-svg-icons';\r\nimport { CSS_CLASSES } from '../../../../styles/constants';\r\n\r\ninterface MergeConfigurationProps {\r\n  downloadModel: boolean;\r\n  setDownloadModel: (download: boolean) => void;\r\n  saveToMergeSlot: boolean;\r\n  setSaveToMergeSlot: (save: boolean) => void;\r\n  saveToEmptySlot: boolean;\r\n  setSaveToEmptySlot: (save: boolean) => void;\r\n  emptySlots: RVCModelSlot[];\r\n}\r\n\r\nfunction MergeConfiguration({\r\n  downloadModel,\r\n  setDownloadModel,\r\n  saveToMergeSlot,\r\n  setSaveToMergeSlot,\r\n  saveToEmptySlot,\r\n  setSaveToEmptySlot,\r\n  emptySlots\r\n}: MergeConfigurationProps): JSX.Element {\r\n\r\n  const handleMergeSlotChange = (checked: boolean) => {\r\n    setSaveToMergeSlot(checked);\r\n    if (checked) {\r\n      setSaveToEmptySlot(false);\r\n    }\r\n  };\r\n\r\n  const handleEmptySlotChange = (checked: boolean) => {\r\n    setSaveToEmptySlot(checked);\r\n    if (checked) {\r\n      setSaveToMergeSlot(false);\r\n    }\r\n  };\r\n\r\n  const handleDownloadModelChange = (checked: boolean) => {\r\n    setDownloadModel(checked);\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-4 p-4 bg-slate-50 dark:bg-gray-800/30 rounded-lg border border-slate-200 dark:border-gray-700\">\r\n      <div className=\"flex justify-between items-center\">\r\n        <h4 className=\"text-md font-medium text-slate-700 dark:text-gray-200\">Merge Options</h4>\r\n        <FontAwesomeIcon \r\n          icon={faCog} \r\n          className=\"h-4 w-4 text-slate-500 dark:text-gray-400\" \r\n        />\r\n      </div>\r\n      \r\n      <div className=\"space-y-3\">\r\n        {/* Download Option */}\r\n        <div className=\"flex items-center space-x-3\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"download-model\"\r\n            checked={downloadModel}\r\n            onChange={(e) => handleDownloadModelChange(e.target.checked)}\r\n            className={CSS_CLASSES.checkbox}\r\n          />\r\n          <label htmlFor=\"download-model\" className={CSS_CLASSES.label}>\r\n            Download merged model\r\n          </label>\r\n        </div>\r\n\r\n        {/* Save to Merge Slot Option */}\r\n        <div className=\"flex items-center space-x-3\">\r\n          <input\r\n            type=\"checkbox\"\r\n            id=\"save-merge-slot\"\r\n            checked={saveToMergeSlot}\r\n            onChange={(e) => handleMergeSlotChange(e.target.checked)}\r\n            className={CSS_CLASSES.checkbox}\r\n          />\r\n          <label htmlFor=\"save-merge-slot\" className={CSS_CLASSES.label}>\r\n            Save to merge slot\r\n          </label>\r\n        </div>\r\n\r\n        {/* Save to Empty Slot Option */}\r\n        <div className=\"space-y-2\">\r\n          <div className=\"flex items-center space-x-3\">\r\n            <input\r\n              type=\"checkbox\"\r\n              id=\"save-empty-slot\"\r\n              checked={saveToEmptySlot}\r\n              onChange={(e) => handleEmptySlotChange(e.target.checked)}\r\n              disabled={emptySlots.length === 0}\r\n              className={CSS_CLASSES.checkbox}\r\n            />\r\n            <label htmlFor=\"save-empty-slot\" className={`${CSS_CLASSES.label} ${emptySlots.length === 0 ? 'text-slate-400 dark:text-gray-500' : ''}`}>\r\n              Save to empty slot (auto-select first available)\r\n            </label>\r\n          </div>\r\n\r\n          {emptySlots.length === 0 && (\r\n            <div className=\"ml-6 text-xs text-slate-500 dark:text-gray-400\">\r\n              No empty slots available\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MergeConfiguration;","import { useState, JSX } from 'react';\r\nimport { ModelFileKind, ModelUploadSetting, RVCModelSlot, VoiceChangerType } from '@dannadori/voice-changer-client-js';\r\nimport { CSS_CLASSES } from '../../../../styles/constants';\r\nimport GenericModal from '../../../Modals/GenericModal';\r\nimport { UIContextType } from '../../../../context/UIContext';\r\nimport MergeFilter from './MergeFilter';\r\nimport MergeModelList from './MergeModelList';\r\nimport MergeConfiguration from './MergeConfiguration';\r\nimport { useAppState } from '../../../../context/AppContext';\r\n\r\ninterface ModelMergeInfo {\r\n  slot: RVCModelSlot;\r\n  percentage: number;\r\n}\r\n\r\ninterface MergeLabModalProps {\r\n  guiState: UIContextType;\r\n  showMerge: boolean;\r\n  setShowMerge: (showMerge: boolean) => void;\r\n}\r\n\r\nfunction MergeLabModal({ guiState, showMerge, setShowMerge }: MergeLabModalProps): JSX.Element {\r\n  const appState = useAppState();\r\n\r\n  const [sampleRate, setSampleRate] = useState<number>(40000);\r\n  const [embedder, setEmbedder] = useState<string>('hubert_base');\r\n  const [searchText, setSearchText] = useState<string>('');\r\n  const [selectedModels, setSelectedModels] = useState<ModelMergeInfo[]>([]);\r\n  \r\n  // Merge configuration state\r\n  const [downloadModel, setDownloadModel] = useState<boolean>(true);\r\n  const [saveToMergeSlot, setSaveToMergeSlot] = useState<boolean>(false);\r\n  const [saveToEmptySlot, setSaveToEmptySlot] = useState<boolean>(false);\r\n\r\n  const getFilteredModels = (): RVCModelSlot[] => {\r\n    if (!appState.serverSetting.serverSetting.modelSlots) return [];\r\n    \r\n    return appState.serverSetting.serverSetting.modelSlots.filter((slot: RVCModelSlot) => {\r\n      if (!slot.name || slot.name.length === 0) return false;\r\n      \r\n      if (slot.samplingRate && slot.samplingRate !== sampleRate) return false;\r\n      \r\n      if (slot.embedder && slot.embedder !== embedder) return false;\r\n      \r\n      if (searchText && !slot.name.toLowerCase().includes(searchText.toLowerCase())) return false;\r\n      \r\n      return true;\r\n    });\r\n  };\r\n\r\n  const getEmptySlots = (): RVCModelSlot[] => {\r\n    if (!appState.serverSetting.serverSetting.modelSlots) return [];\r\n    \r\n    return appState.serverSetting.serverSetting.modelSlots.filter((slot: RVCModelSlot) => {\r\n      return !slot.name || slot.name.length === 0;\r\n    });\r\n  };\r\n\r\n  const getFirstEmptySlot = (): RVCModelSlot | null => {\r\n    const emptySlots = getEmptySlots();\r\n    return emptySlots.length > 0 ? emptySlots[0] : null;\r\n  };\r\n\r\n  const handleFilterChange = () => {\r\n    setSelectedModels([]);\r\n  };\r\n\r\n  const handleModelToggle = (slot: RVCModelSlot) => {\r\n    const isSelected = selectedModels.some(m => m.slot.slotIndex === slot.slotIndex);\r\n    \r\n    if (isSelected) {\r\n      setSelectedModels(selectedModels.filter(m => m.slot.slotIndex !== slot.slotIndex));\r\n    } else {\r\n      setSelectedModels([...selectedModels, { slot, percentage: 50 }]);\r\n    }\r\n  };\r\n\r\n  const handlePercentageChange = (slotIndex: number, percentage: number) => {\r\n    setSelectedModels(selectedModels.map(m => \r\n      m.slot.slotIndex === slotIndex \r\n        ? { ...m, percentage }\r\n        : m\r\n    ));\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setShowMerge(false);\r\n    setSelectedModels([]);\r\n    setSampleRate(40000);\r\n    setEmbedder('hubert_base');\r\n    setSearchText('');\r\n    setDownloadModel(true);\r\n    setSaveToMergeSlot(false);\r\n    setSaveToEmptySlot(false);\r\n  };\r\n\r\n  const handleMerge = async () => {\r\n    try {      \r\n      if (downloadModel || saveToEmptySlot || saveToMergeSlot) {\r\n        // Handle file operations efficiently - fetch once if needed\r\n        let mergedModelBlob: Blob | null = null;\r\n\r\n        // Get a list of selected models for merging\r\n        const validMergeElements = selectedModels.filter((x) => {\r\n          return x.percentage > 0;\r\n        });\r\n  \r\n        // Start the merge process\r\n        await appState.serverSetting.mergeModel({\r\n            voiceChangerType: VoiceChangerType.RVC,\r\n            command: \"mix\",\r\n            files: validMergeElements.map(x => ({\r\n                slotIndex: x.slot.slotIndex,\r\n                strength: x.percentage / 100\r\n            })),\r\n        });\r\n  \r\n        guiState.showError('Models merged successfully!', 'Confirm');\r\n          \r\n        // Fetch the merged model file once\r\n        const response = await fetch(\"http://127.0.0.1:18888/tmp/merged.pth\");\r\n        mergedModelBlob = await response.blob();\r\n        \r\n        // Download to local drive if requested\r\n        if (downloadModel) {\r\n          const url = URL.createObjectURL(mergedModelBlob);\r\n          const a = document.createElement(\"a\");\r\n          a.href = url;\r\n          a.download = \"merged.pth\";\r\n          document.body.appendChild(a);\r\n          a.click();\r\n          document.body.removeChild(a);\r\n          URL.revokeObjectURL(url); // Clean up\r\n          guiState.showError('Models downloaded successfully!', 'Confirm');\r\n        }\r\n        \r\n        // Upload to slot if requested\r\n        if (saveToEmptySlot || saveToMergeSlot) {\r\n          let slotIndex = saveToEmptySlot ? getFirstEmptySlot() : 499;\r\n\r\n          if(saveToEmptySlot && !slotIndex){\r\n            guiState.showError('No empty slots available for saving.', 'Error');\r\n            return;\r\n          }\r\n\r\n          // Create a File object from the already fetched blob\r\n          const mergedModelFile = new File([mergedModelBlob], \"merged.pth\", { type: \"application/octet-stream\" });\r\n\r\n          // Save the merged model to the specified slot\r\n          const uploadSettingsData: ModelUploadSetting & { embedder: string } = {\r\n            voiceChangerType: VoiceChangerType.RVC,\r\n            slot: saveToEmptySlot ? getFirstEmptySlot()?.slotIndex! : 499,\r\n            files: [ { kind: \"rvcModel\" as ModelFileKind, file: mergedModelFile, dir: \"\" }],\r\n            isSampleMode: false,\r\n            sampleId: null,\r\n            params: {},\r\n            embedder: embedder\r\n          };\r\n\r\n          await appState.serverSetting.uploadModel(uploadSettingsData);\r\n          guiState.showError('Models uploaded successfully!', 'Confirm');\r\n          handleClose();\r\n        }\r\n      } else {\r\n        guiState.showError('No action selected. Please select at least one action.', 'Error');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error merging models:', error);\r\n      guiState.showError(`Error merging models: ${error instanceof Error ? error.message : String(error)}`, 'Error');\r\n    }\r\n  };\r\n\r\n  const filteredModels = getFilteredModels();\r\n  const emptySlots = getEmptySlots();\r\n\r\n  return (\r\n    <GenericModal\r\n      isOpen={showMerge}\r\n      onClose={handleClose}\r\n      title=\"Merge Lab\"\r\n      closeOnOutsideClick={false}\r\n      primaryButton={{\r\n        text: `${appState.serverSetting.isUploading ? `Merging... (${appState.serverSetting.uploadProgress.toFixed(1)}%)` : 'Merge'}`,\r\n        onClick: handleMerge,\r\n        disabled: ((selectedModels.length === 0) || appState.serverSetting.isUploading),\r\n        className: CSS_CLASSES.modalPrimaryButton,\r\n      }}\r\n      secondaryButton={{\r\n        text: 'Close',\r\n        onClick: handleClose,\r\n        className: CSS_CLASSES.modalSecondaryButton,\r\n        disabled: appState.serverSetting.isUploading\r\n      }}\r\n    >\r\n      <div className=\"space-y-6 max-h-[60vh] overflow-y-auto pr-2\">\r\n        <MergeFilter\r\n          sampleRate={sampleRate}\r\n          setSampleRate={setSampleRate}\r\n          embedder={embedder}\r\n          setEmbedder={setEmbedder}\r\n          searchText={searchText}\r\n          setSearchText={setSearchText}\r\n          onFilterChange={handleFilterChange}\r\n        />\r\n\r\n        <MergeConfiguration\r\n          downloadModel={downloadModel}\r\n          setDownloadModel={setDownloadModel}\r\n          saveToMergeSlot={saveToMergeSlot}\r\n          setSaveToMergeSlot={setSaveToMergeSlot}\r\n          saveToEmptySlot={saveToEmptySlot}\r\n          setSaveToEmptySlot={setSaveToEmptySlot}\r\n          emptySlots={emptySlots}\r\n        />\r\n\r\n        <MergeModelList\r\n          models={filteredModels}\r\n          selectedModels={selectedModels}\r\n          onModelToggle={handleModelToggle}\r\n          onPercentageChange={handlePercentageChange}\r\n          modelDir={appState.serverSetting.serverSetting.voiceChangerParams.model_dir}\r\n        />\r\n      </div>\r\n    </GenericModal>\r\n  );\r\n}\r\n\r\nexport default MergeLabModal; ","import { JSX, useState, useEffect } from 'react';\nimport { useThemeContext } from '../../context/ThemeContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSun, faMoon, faPlay, faStop, faTriangleExclamation, faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons';\nimport { AppContextValue, useAppState } from '../../context/AppContext';\nimport { useUIContext } from '../../context/UIContext';\nimport MergeLabModal from './Modals/Merge/MergeLabModal';\n\ninterface BottomBarProps {\n  openModal: (type: string, props?: any) => void; // Added openModal prop\n}\n\nfunction BottomBar({ openModal }: BottomBarProps): JSX.Element {\n  const { theme, toggleTheme } = useThemeContext();\n  const appState = useAppState() as AppContextValue; // Cast via unknown for broader compatibility if types are complex\n  const uiContext = useUIContext();\n\n  const [showMerge, setShowMerge] = useState<boolean>(false);\n  const [startWithAudioContextCreate, setStartWithAudioContextCreate] = useState<boolean>(false);\n\n  useEffect(() => {\n      if (!startWithAudioContextCreate) {\n          return;\n      }\n      uiContext.setIsConverting(true);\n      appState.start();\n  }, [startWithAudioContextCreate]);\n\n\n  const handleToggleClientActivity = async () => {\n    if(uiContext.isConverting){\n      handleStop();\n    }else{\n      handleStart();\n    }\n  }\n\n  const handleStart = async () => {\n    if (appState.serverSetting.serverSetting.modelSlotIndex === -1) {\n      uiContext.showError('Select a voice model first.', \"Warning\")\n      return\n  }\n  if (appState.serverSetting.serverSetting.enableServerAudio == 0) {\n      if (!appState.setting.voiceChangerClientSetting.audioInput || appState.setting.voiceChangerClientSetting.audioInput == 'none') {\n          uiContext.showError('Select an audio input device.', \"Warning\")\n          return\n      }\n\n      if (uiContext.audioOutputForGUI == 'none') {\n          uiContext.showError('Select an audio output device.', \"Warning\")\n          return\n      }\n\n      if (!appState.initializedRef.current) {\n          while (true) {\n              await new Promise<void>((resolve) => {\n                  setTimeout(resolve, 500);\n              });\n              if (appState.initializedRef.current) {\n                  break;\n              }\n          }\n          setStartWithAudioContextCreate(true);\n      } else {\n          uiContext.setIsConverting(true);\n          await appState.start();\n      }\n  } else {\n      if (appState.serverSetting.serverSetting.serverInputDeviceId == -1) {\n          uiContext.showError('Select an audio input device.', \"Warning\")\n          return\n      }\n      if (appState.serverSetting.serverSetting.serverOutputDeviceId == -1) {\n          uiContext.showError('Select an audio output device.', \"Warning\")\n          return\n      }\n      appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, serverAudioStated: 1 });\n      uiContext.setIsConverting(true);\n    }\n  };\n\n  const handleStop = async () => {\n    if (appState.serverSetting.serverSetting.enableServerAudio == 0) {\n        uiContext.setIsConverting(false);\n        await appState.stop();\n    } else {\n        uiContext.setIsConverting(false);\n        appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, serverAudioStated: 0 });\n    }\n};\n\n  const handleTogglePassthrough = () => {\n    const skipConfirmation = appState.setting?.voiceChangerClientSetting?.passThroughConfirmationSkip === true;\n\n    if (!appState.serverSetting?.serverSetting?.passThrough) { // Attempting to activate passthrough\n      if (skipConfirmation) {\n        appState.serverSetting.updateServerSettings({\n          ...appState.serverSetting.serverSetting,\n          passThrough: true,\n        });\n      } else {\n        openModal('passThrough', {\n          title: \"Activate Passthrough?\",\n          message: \"Activating passthrough will output your input voice directly without any changes.\",\n          icon: faTriangleExclamation,\n          iconClassName: \"text-yellow-500 w-12 h-12 mx-auto mb-4\",\n          confirmText: \"Activate Passthrough\",\n          cancelText: \"Cancel\",\n          onConfirm: () => {\n            appState.serverSetting.updateServerSettings({\n              ...appState.serverSetting.serverSetting,\n              passThrough: true,\n            });\n          }\n        });\n      }\n    } else { // Attempting to deactivate passthrough\n      appState.serverSetting.updateServerSettings({\n        ...appState.serverSetting.serverSetting,\n        passThrough: false,\n      });\n    }\n  };\n\n  // Standard buttons: px-3 py-2, h-auto (derived from padding)\n  // Taller action buttons: px-4 py-3, h-12 (explicit height for consistency)\n  const buttonBaseClass = \"text-sm font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 transition-all duration-150 flex items-center justify-center space-x-2 shadow-sm\";\n  const lightButtonClass = \"px-3 py-2 text-slate-700 bg-slate-200 hover:bg-slate-300 dark:text-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 focus:ring-blue-500\";\n  \n  return (\n    <>  \n    <MergeLabModal \n      guiState={uiContext}\n      showMerge={showMerge}\n      setShowMerge={setShowMerge}\n    />\n    <div className=\"h-20 min-h-[60px] bg-white dark:bg-gray-800 border-t border-slate-200 dark:border-gray-700 flex items-center justify-between px-4 py-2 flex-shrink-0 transition-colors duration-300\">\n      <div className=\"flex space-x-2\">\n        <button onClick={() => setShowMerge(true)} className={`${buttonBaseClass} ${lightButtonClass}`}>Merge Lab</button>\n        <button onClick={() => openModal('advancedSettings')} className={`${buttonBaseClass} ${lightButtonClass}`}>Advanced Settings</button>\n      </div>\n\n      <div className=\"flex items-center space-x-3\">\n        <button \n          onClick={handleToggleClientActivity}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-150 flex items-center space-x-2 \n            ${uiContext.isConverting \n              ? 'bg-red-500 hover:bg-red-600 text-white'\n              : 'bg-green-500 hover:bg-green-600 text-white'}\n            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 \n            ${uiContext.isConverting ? 'focus:ring-red-400' : 'focus:ring-green-400'}`}\n        >\n          <FontAwesomeIcon icon={uiContext.isConverting ? faStop : faPlay} />\n          <span>{uiContext.isConverting ? 'Stop Server' : 'Start Server'}</span>\n        </button>\n        <button \n          onClick={handleTogglePassthrough}\n          className={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-150 flex items-center space-x-2 \n            ${appState.serverSetting?.serverSetting?.passThrough \n              ? 'bg-yellow-500 hover:bg-yellow-600 text-gray-900'\n              : 'bg-gray-600 hover:bg-gray-500 text-white'}\n            focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 \n            ${appState.serverSetting?.serverSetting?.passThrough ? 'focus:ring-yellow-400' : 'focus:ring-gray-400'}`}\n        >\n          <FontAwesomeIcon icon={appState.serverSetting?.serverSetting?.passThrough ? faVolumeUp : faVolumeMute} />\n          <span>{appState.serverSetting?.serverSetting?.passThrough ? 'Passthrough ON' : 'Passthrough OFF'}</span>\n        </button>\n      </div>\n\n      <div className=\"flex items-center space-x-2\">\n        <button onClick={() => openModal('serverInfo')} className={`${buttonBaseClass} ${lightButtonClass}`}>Server Info</button>\n        <button onClick={() => openModal('clientInfo')} className={`${buttonBaseClass} ${lightButtonClass}`}>Client Info</button>\n        <button \n          onClick={toggleTheme}\n          className={`${buttonBaseClass} ${lightButtonClass} w-10 h-10`}\n          aria-label={theme === 'light' ? \"Switch to dark mode\" : \"Switch to light mode\"}\n        >\n          <FontAwesomeIcon icon={theme === 'light' ? faMoon : faSun} className=\"h-5 w-5\" />\n        </button>\n      </div>\n    </div>\n    </>\n  );\n}\n\nexport default BottomBar; ","import React, { useState, useEffect, useCallback, useRef, InputHTMLAttributes } from 'react';\n\ninterface DebouncedSliderProps extends Omit<InputHTMLAttributes<HTMLInputElement>, 'onChange' | 'value'> {\n  value: number; // Controlled component value\n  onChange: (value: number) => void; // Debounced change callback\n  onImmediateChange?: (value: number) => void; // Optional: Callback for immediate value change\n  // id, name, min, max, step, className, disabled, etc., will be inherited from InputHTMLAttributes\n}\n\nexport const useDebouncedCallback = <T extends (...args: any[]) => void>(\n  callback: T,\n  delay: number\n) => {\n  const timeoutRef = useRef<number>();\n\n  const debouncedFn = useCallback((...args: Parameters<T>) => {\n    window.clearTimeout(timeoutRef.current);\n    timeoutRef.current = window.setTimeout(() => {\n      callback(...args);\n    }, delay);\n  }, [callback, delay]);\n\n  useEffect(\n    () => () => {\n      window.clearTimeout(timeoutRef.current);\n    },\n    []\n  );\n\n  return debouncedFn;\n};\n\nconst DebouncedSlider: React.FC<DebouncedSliderProps> = ({\n  value,\n  onChange,\n  onImmediateChange,\n  ...rest\n}) => {\n  const [internalValue, setInternalValue] = useState<number>(value);\n  useEffect(() => {\n    setInternalValue(value);\n  }, [value]);\n\n  const debouncedChange = useDebouncedCallback((val: number) => {\n    onChange(val);\n  }, 300);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const val = e.target.valueAsNumber;\n    setInternalValue(val);\n    if (onImmediateChange) onImmediateChange(val);\n    debouncedChange(val);\n  };\n\n  return (\n    <input\n      type=\"range\"\n      {...rest} // Spread all other native input attributes\n      value={internalValue} // Controlled internal value\n      onChange={handleChange} // Internal handler\n    />\n  );\n};\n\nexport default DebouncedSlider;\n","import { JSX, useState, useEffect } from 'react';\nimport { useAppState } from '../../../context/AppContext';\nimport { useUIContext } from '../../../context/UIContext';\nimport DebouncedSlider from '../../Helpers/DebouncedSlider';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\nimport { Protocol } from '@dannadori/voice-changer-client-js';\n\nfunction AdvancedSettingsModal(): JSX.Element {\n  const appState = useAppState();\n  const uiState = useUIContext();\n  \n  // Local state for immediate slider feedback\n  const [localCrossFadeOverlapSize, setLocalCrossFadeOverlapSize] = useState<number>(\n    appState.serverSetting?.serverSetting?.crossFadeOverlapSize ?? 0.02\n  );\n  const [localProtect, setLocalProtect] = useState<number>(\n    appState.serverSetting?.serverSetting?.protect ?? 0\n  );\n\n  // Update local state when server settings change\n  useEffect(() => {\n    const crossFade = appState.serverSetting?.serverSetting?.crossFadeOverlapSize;\n    if (crossFade != null) setLocalCrossFadeOverlapSize(crossFade);\n    \n    const protect = appState.serverSetting?.serverSetting?.protect;\n    if (protect != null) setLocalProtect(protect);\n  }, [appState.serverSetting?.serverSetting]);\n\n  const commonLabelClass = \"block text-sm font-medium text-slate-600 dark:text-gray-400 mb-1\";\n  const commonSelectClass = \"w-full p-2 border border-slate-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-slate-900 dark:text-gray-100 text-sm transition-colors duration-150\";\n  const commonRangeClass = \"w-full h-2 bg-slate-200 dark:bg-gray-600 rounded-lg appearance-none cursor-pointer accent-blue-500 dark:accent-blue-400 transition-colors duration-150\";\n  const commonCheckboxLabelClass = \"inline-flex items-center text-sm text-slate-700 dark:text-gray-300\";\n\n  return (\n    <div className=\"space-y-4 py-2\">\n      {/* UI Language Setting Start */}\n      <div>\n        <label htmlFor=\"uiLanguage\" className={commonLabelClass}>UI Language</label>\n        <select\n          id=\"uiLanguage\"\n          className={commonSelectClass}\n          value={(appState.setting as any)?.uiLanguage || 'en'} // Assuming 'uiLanguage' in appState.setting, cast to any for now\n          onChange={(e) => {\n            console.log('UI Language selected:', e.target.value);\n            // TODO: Implement actual update to appState.setting, e.g.:\n            // appState.updateSetting({ ...appState.setting, uiLanguage: e.target.value });\n          }}\n        >\n          <option value=\"en\">🇬🇧 English</option>\n          <option value=\"de\">🇩🇪 Deutsch</option>\n          <option value=\"ja\">🇯🇵 日本語</option>\n        </select>\n      </div>\n      {/* UI Language Setting End */}\n\n      <div>\n        <label htmlFor=\"protocol\" className={commonLabelClass}>Protocol</label>\n        <select id=\"protocol\" className={commonSelectClass}\n          value={appState.setting.workletNodeSetting.protocol}\n          onChange={e => appState.setWorkletNodeSetting({ ...appState.setting.workletNodeSetting, protocol: e.target.value as Protocol })}\n        >\n          <option value=\"sio\">sio</option>\n          <option value=\"rest\">rest</option>\n        </select>\n      </div>\n      <div>\n        <label htmlFor=\"crossfade\" className={commonLabelClass}>Crossfade Overlap</label>\n        <DebouncedSlider id=\"crossfade\" name=\"crossfade\"\n          min={0.05} max={0.2} step={0.01}\n          value={localCrossFadeOverlapSize}\n          className={commonRangeClass}\n          onImmediateChange={setLocalCrossFadeOverlapSize}\n          onChange={async val => {\n            await appState.serverSetting.updateServerSettings({ \n              ...appState.serverSetting.serverSetting, \n              crossFadeOverlapSize: val \n            });\n          }}\n        />\n        <p className=\"text-xs text-slate-600 dark:text-gray-400 text-right\">{localCrossFadeOverlapSize.toFixed(2)} s</p>\n      </div>\n      <div>\n        <label className={commonCheckboxLabelClass}>\n          <input type=\"checkbox\" className=\"mr-2 accent-blue-500 dark:accent-blue-400\"\n            checked={appState.serverSetting.serverSetting.silenceFront === 1}\n            onChange={async e => {\n              const value = e.target.checked ? 1 : 0;\n              uiState.startLoading(`${value === 1 ? \"Enabling\" : \"Disabling\"} Silence Front`);\n              await appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, silenceFront: value });\n              uiState.stopLoading();\n            }}\n          />\n          Silence Front\n        </label>\n      </div>\n      <div>\n        <label className={commonCheckboxLabelClass}>\n          <input type=\"checkbox\" className=\"mr-2 accent-blue-500 dark:accent-blue-400\"\n            checked={appState.serverSetting.serverSetting.forceFp32 === 1}\n            onChange={async e => {\n              const value = e.target.checked ? 1 : 0;\n              uiState.startLoading(`${value === 1 ? \"Enabling\" : \"Disabling\"} Force FP32 Mode`);\n              await appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, forceFp32: value });\n              uiState.stopLoading();\n            }}\n          />\n          Force FP32 Mode\n        </label>\n      </div>\n      <div>\n        <label className={commonCheckboxLabelClass}>\n          <input type=\"checkbox\" className=\"mr-2 accent-blue-500 dark:accent-blue-400\"\n            checked={appState.serverSetting.serverSetting.disableJit === 1}\n            onChange={async e => {\n              const value = e.target.checked ? 1 : 0;\n              uiState.startLoading(`${value === 1 ? \"Disabling\" : \"Enabling\"} JIT Compilation`); // Note: Corrected logic for disableJit\n              await appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, disableJit: value });\n              uiState.stopLoading();\n            }}\n          />\n          Disable JIT Compilation\n        </label>\n      </div>\n      <div>\n        <label className={commonCheckboxLabelClass}>\n          <input type=\"checkbox\" className=\"mr-2 accent-blue-500 dark:accent-blue-400\"\n            checked={appState.serverSetting.serverSetting.useONNX === 1}\n            onChange={async e => {\n              const value = e.target.checked ? 1 : 0;\n              uiState.startLoading(`${value === 1 ? \"Enabling\" : \"Disabling\"} Convert to ONNX`);\n              await appState.serverSetting.updateServerSettings({ ...appState.serverSetting.serverSetting, useONNX: value });\n              uiState.stopLoading();\n            }}\n          />\n          Convert to ONNX\n        </label>\n      </div>\n      <div>\n        <label htmlFor=\"protect\" className={commonLabelClass}>Protect</label>\n        <DebouncedSlider id=\"protect\" name=\"protect\"\n          min={0} max={0.5} step={0.01}\n          value={localProtect}\n          className={commonRangeClass}  \n          onImmediateChange={setLocalProtect}\n          onChange={async val => {\n            await appState.serverSetting.updateServerSettings({ \n              ...appState.serverSetting.serverSetting, \n              protect: val \n            });\n          }}\n        />\n        <p className=\"text-xs text-slate-600 dark:text-gray-400 text-right\">{localProtect.toFixed(2)}</p>\n      </div>  \n      <div className=\"border border-red-500 p-3 rounded bg-red-50 dark:bg-red-900/20 space-y-2\">\n        <div className=\"flex items-center text-red-600 mb-2\">\n          <FontAwesomeIcon icon={faExclamationTriangle} className=\"mr-2\" />\n          <span className=\"font-semibold\">Danger Zone</span>\n        </div>\n        <label className={commonCheckboxLabelClass}>\n          <input type=\"checkbox\" className=\"mr-2 accent-red-500 dark:accent-red-400\"\n            checked={appState.setting.voiceChangerClientSetting.passThroughConfirmationSkip}\n            onChange={e => appState.setVoiceChangerClientSetting({ ...appState.setting.voiceChangerClientSetting, passThroughConfirmationSkip: e.target.checked })}\n          />\n          Skip Pass through confirmation\n        </label>\n      </div>\n    </div>\n  );\n}\n\nexport default AdvancedSettingsModal;","import { JSX } from 'react';\nimport { useAppState } from '../../../context/AppContext';\n\nfunction ServerInfoModal(): JSX.Element {\n  const appState = useAppState();\n  const serverJson = JSON.stringify(appState.serverSetting.serverSetting, null, 2);\n  return (\n      <div className=\"bg-slate-100 dark:bg-slate-800 p-3 rounded-lg shadow-inner\">\n        <pre className=\"text-xs text-slate-700 dark:text-gray-300 overflow-auto max-h-[60vh] custom-scrollbar p-2 rounded-md bg-white dark:bg-slate-900\">\n          <code>{serverJson}</code>\n        </pre>\n    </div>\n  );\n}\n\nexport default ServerInfoModal;","import { JSX } from 'react';\nimport { useAppState } from '../../../context/AppContext';\n\nfunction ClientInfoModal(): JSX.Element {\n  const appState = useAppState();\n  const clientJson = JSON.stringify(appState.setting, null, 2);\n  return (\n      <div className=\"bg-slate-100 dark:bg-slate-800 p-3 rounded-lg shadow-inner\">\n        <pre className=\"text-xs text-slate-700 dark:text-gray-300 overflow-auto max-h-[60vh] custom-scrollbar p-2 rounded-md bg-white dark:bg-slate-900\">\n          <code>{clientJson}</code>\n        </pre>\n    </div>\n  );\n}\n\nexport default ClientInfoModal;","import React, { JSX } from 'react';\r\n\r\ninterface EditModelModalProps {\r\n  modelId?: string; // To identify which model to edit\r\n  modelName?: string;\r\n}\r\n\r\nfunction EditModelModal({ modelId, modelName }: EditModelModalProps): JSX.Element {\r\n  return (\r\n    <div>\r\n      <p className=\"text-sm text-slate-600 dark:text-gray-300\">\r\n        Edit model content for {modelName || 'model'} (ID: {modelId || 'N/A'}) goes here. Allow modification of model name, parameters, etc.\r\n      </p>\r\n      {/* Add form fields pre-filled with model data */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EditModelModal; ","import React, { JSX } from 'react';\r\n\r\ninterface DeleteModelModalProps {\r\n  modelId?: string; // To identify which model to delete\r\n  modelName?: string;\r\n}\r\n\r\nfunction DeleteModelModal({ modelId, modelName }: DeleteModelModalProps): JSX.Element {\r\n  return (\r\n    <div>\r\n      <p className=\"text-sm text-slate-600 dark:text-gray-300\">\r\n        Are you sure you want to delete the model \"{modelName || 'this model'}\" (ID: {modelId || 'N/A'})?\r\n      </p>\r\n      <p className=\"text-xs text-red-500 dark:text-red-400 mt-2\">\r\n        This action cannot be undone.\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DeleteModelModal; ","import { JSX } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { IconDefinition } from '@fortawesome/fontawesome-svg-core';\r\n\r\nexport interface PassthroughConfirmModalProps {\r\n  title?: string;\r\n  message?: string;\r\n  icon?: IconDefinition;\r\n  iconClassName?: string;\r\n  confirmText?: string;\r\n  cancelText?: string;\r\n  onConfirm?: () => void;\r\n  onCancel?: () => void;\r\n  closeModal: () => void; // Standard prop to close the modal\r\n}\r\n\r\nconst PassthroughConfirmModal: React.FC<PassthroughConfirmModalProps> = ({\r\n  title = \"Confirm Action\",\r\n  message = \"Are you sure you want to proceed?\",\r\n  icon,\r\n  iconClassName = \"text-yellow-500 w-12 h-12 mx-auto mb-4\",\r\n  confirmText = \"Confirm\",\r\n  onConfirm,\r\n  onCancel,\r\n  closeModal,\r\n}): JSX.Element => {\r\n\r\n  const handleConfirm = () => {\r\n    if (onConfirm) {\r\n      onConfirm();\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    if (onCancel) {\r\n      onCancel();\r\n    }\r\n    closeModal();\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md mx-auto\">\r\n      {icon && (\r\n        <div className=\"flex justify-center mb-4\">\r\n          <FontAwesomeIcon icon={icon} className={`${iconClassName} text-4xl`} />\r\n        </div>\r\n      )}\r\n      <h3 className=\"text-xl font-semibold text-center text-gray-900 dark:text-white mb-3\">\r\n        {title}\r\n      </h3>\r\n      <p className=\"text-sm text-gray-600 dark:text-gray-300 text-center mb-6\">\r\n        {message}\r\n      </p>\r\n      <div className=\"flex justify-center space-x-3\">\r\n        <button\r\n          onClick={handleConfirm}\r\n          className=\"px-4 py-2 text-sm font-medium text-white bg-red-600 hover:bg-red-700 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 dark:focus:ring-offset-gray-900 transition-colors duration-150\"\r\n        >\r\n          {confirmText}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PassthroughConfirmModal; ","import React from 'react';\r\nimport { useSortable } from '@dnd-kit/sortable';\r\nimport { CSS } from '@dnd-kit/utilities';\r\n\r\ninterface SortableCardItemProps {\r\n  id: string;\r\n  children: (attributes: Record<string, any>, listeners: Record<string, any>) => React.ReactNode;\r\n}\r\n\r\nconst SortableCardItem: React.FC<SortableCardItemProps> = ({ id, children }) => {\r\n  const {\r\n    attributes,\r\n    listeners,\r\n    setNodeRef,\r\n    transform,\r\n    transition,\r\n    isDragging, // Useful for styling the dragged item\r\n  } = useSortable({ id });\r\n\r\n  const style = {\r\n    transform: CSS.Transform.toString(transform),\r\n    transition,\r\n    opacity: isDragging ? 0.5 : 1, // Example: make item semi-transparent when dragging\r\n    // Ensure the card takes up full height in its grid cell if needed, or adjust layout as necessary\r\n    // height: '100%', \r\n    display: 'flex', // Make it a flex container to allow child to grow\r\n  };\r\n\r\n  return (\r\n    <div ref={setNodeRef} style={style} className=\"flex\"> {/* Ensure this div allows child to expand */}\r\n      {/* Pass attributes and listeners to children, so they can be applied to a specific drag handle */}\r\n      {children(attributes, listeners ?? {})}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortableCardItem; ","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowsAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\ninterface DragHandleProps {\r\n  // Pass attributes and listeners from useSortable down to this handle\r\n  attributes?: Record<string, any>;\r\n  listeners?: Record<string, any>;\r\n  className?: string;\r\n  title?: string;\r\n}\r\n\r\nconst DragHandle: React.FC<DragHandleProps> = ({ attributes, listeners, className, title = \"Drag\" }) => {\r\n  return (\r\n    <button \r\n      {...attributes} \r\n      {...listeners} \r\n      className={`p-1 text-slate-500 hover:text-slate-700 dark:text-gray-400 dark:hover:text-gray-200 cursor-grab ${className}`}\r\n      title={title}\r\n    >\r\n      <FontAwesomeIcon icon={faArrowsAlt} className=\"h-5 w-5\" />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DragHandle; ","import { RVCModelSlot } from \"@dannadori/voice-changer-client-js\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPen } from \"@fortawesome/free-solid-svg-icons\";  \r\n\r\ninterface ModelInfoProps {\r\n    model: RVCModelSlot;\r\n    openModal: (type: string, props?: { model?: RVCModelSlot }) => void;\r\n    icon: string;\r\n}\r\nfunction ModelInfo({ model, openModal, icon }: ModelInfoProps) {\r\n    const isONNX = model?.isONNX ?? false;\r\n    const modelTypeDisplay = isONNX \r\n        ? model?.modelTypeOnnx || model?.modelType \r\n        : model?.modelType;\r\n\r\n    return (\r\n        <>\r\n          {model ? (\r\n            <div className=\"flex flex-col items-center text-center mb-6 p-4 bg-slate-50 dark:bg-gray-700/30 rounded-lg\">\r\n              <div className=\"flex w-full items-start\">\r\n                <img \r\n                  src={icon}\r\n                  alt={model.name} \r\n                  className=\"w-28 h-28 md:w-32 md:h-32 rounded-full object-cover border-4 border-white dark:border-gray-600 shadow-lg mb-3 mr-4 flex-shrink-0\"\r\n                />\r\n                <div className=\"flex-grow text-left\">\r\n                  <div className=\"flex items-center mb-1\">\r\n                    <h3 className=\"text-xl lg:text-2xl font-bold text-slate-800 dark:text-gray-100 break-words mr-2\">{model.name}</h3>\r\n                    <button \r\n                      onClick={() => openModal('editModel', { model: model })}\r\n                      className=\"p-1 text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-full\"\r\n                      title=\"Edit Model\"\r\n                    >\r\n                      <FontAwesomeIcon icon={faPen} className=\"h-4 w-4\" />\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <div className=\"text-xs text-slate-600 dark:text-gray-400\">\r\n                        <span className=\"font-semibold\">Embedder:</span> {model.embedder || 'N/A'}\r\n                    </div>\r\n                    <div className=\"text-xs text-slate-600 dark:text-gray-400\">\r\n                        <span className=\"font-semibold\">Model Type:</span> {modelTypeDisplay || 'N/A'}\r\n                    </div>\r\n                    <div className=\"text-xs text-slate-600 dark:text-gray-400\">\r\n                        <span className=\"font-semibold\">Sample Rate:</span> {model.samplingRate ? `${model.samplingRate / 1000} kHz` : 'N/A'}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex items-center justify-center mb-6 p-8 bg-slate-100 dark:bg-gray-700/50 rounded-lg min-h-[160px]\">\r\n              <p className=\"text-slate-500 dark:text-gray-400 italic text-center\">Select a model from the list <br/> to see its settings.</p>\r\n            </div>\r\n          )}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModelInfo;\r\n","import { RVCModelSlot } from \"@dannadori/voice-changer-client-js\";\r\nimport { CSS_CLASSES } from \"../../styles/constants\"\r\nimport DebouncedSlider from \"../Helpers/DebouncedSlider\"\r\n\r\ninterface ModelSettingsProps {\r\n    model: RVCModelSlot;\r\n    handlePitchChange: (val: number) => void;\r\n    handleFormatShiftChange: (val: number) => void;\r\n    handleIndexRatioChange: (val: number) => void;\r\n    handleSpeakerChange: (val: number) => void;\r\n    setModel: (model: RVCModelSlot) => void;\r\n}\r\n\r\nfunction ModelSettings({ model, handlePitchChange, handleFormatShiftChange, handleIndexRatioChange, handleSpeakerChange, setModel }: ModelSettingsProps) {\r\n    // Prepare speaker options outside of JSX return for clarity\r\n    let speakerOptions: JSX.Element[] = [];\r\n    if (model && model.speakers && Object.keys(model.speakers).length > 0) {\r\n        speakerOptions = Object.entries(model.speakers).map(([id, name]) => (\r\n        <option key={id} value={id}>{name as string}</option>\r\n        ));\r\n    } else {\r\n        speakerOptions = [<option key=\"no-speakers\" value={0} disabled>No speakers</option>];\r\n    }\r\n\r\n    return (\r\n        <div className={`space-y-4 ${!model ? 'opacity-50 pointer-events-none' : ''}`}>\r\n        <div>\r\n          <label htmlFor=\"pitch\" className={CSS_CLASSES.label}>Pitch:</label>\r\n          <DebouncedSlider \r\n            id=\"pitch\" \r\n            name=\"pitch\" \r\n            min={-50}\r\n            max={50} \r\n            step={1} \r\n            value={model?.defaultTune || 0} \r\n            onChange={handlePitchChange} \r\n            onImmediateChange={(val) => setModel({ ...model, defaultTune: val })}\r\n            className={CSS_CLASSES.range} \r\n            disabled={!model}\r\n          />\r\n          <p className={CSS_CLASSES.sliderValue}>{model?.defaultTune || 0}</p>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"formatShift\" className={CSS_CLASSES.label}>Formant Shift:</label>\r\n          <DebouncedSlider \r\n            id=\"formatShift\" \r\n            name=\"formatShift\" \r\n            min={-5} \r\n            max={5} \r\n            step={0.1} \r\n            value={model?.defaultFormantShift ?? 0} \r\n            onChange={handleFormatShiftChange} \r\n            onImmediateChange={(val) => setModel({ ...model, defaultFormantShift: val })}\r\n            className={CSS_CLASSES.range} \r\n            disabled={!model}\r\n          />\r\n          <p className={CSS_CLASSES.sliderValue}>{(model?.defaultFormantShift ?? 0).toFixed(1)}</p>\r\n        </div>\r\n        {model.indexFile !== \"\" && (\r\n          <div>\r\n            <label htmlFor=\"indexRatio\" className={CSS_CLASSES.label}>Index Ratio:</label>\r\n            <DebouncedSlider \r\n              id=\"indexRatio\" \r\n              name=\"indexRatio\" \r\n              min={0} \r\n              max={1} \r\n              step={0.01} \r\n              value={model?.defaultIndexRatio ?? 0.5} \r\n              onChange={handleIndexRatioChange} \r\n              onImmediateChange={(val) => setModel({ ...model, defaultIndexRatio: val })}\r\n              className={CSS_CLASSES.range} \r\n              disabled={!model}\r\n            />\r\n            <p className={CSS_CLASSES.sliderValue}>{(model?.defaultIndexRatio ?? 0.5).toFixed(2)}</p>\r\n          </div>\r\n        )}\r\n        {\r\n          // Only show speaker selection if there is more than one speaker\r\n          model.speakers && Object.keys(model.speakers).length > 1 && (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <label htmlFor=\"speaker\" className={CSS_CLASSES.label}>Speaker:</label>\r\n              <select \r\n                id=\"speaker\" \r\n                name=\"speaker\" \r\n                className={CSS_CLASSES.select} \r\n                disabled={!model || !model.speakers || Object.keys(model.speakers).length === 0} \r\n                value={model?.slotIndex ?? 0}\r\n                onChange={(e) => handleSpeakerChange(Number(e.target.value))}\r\n              >\r\n                {speakerOptions}\r\n              </select>\r\n            </div>\r\n          )\r\n        }\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ModelSettings\r\n","import { JSX, useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport { RVCModelSlot,  ClientState } from '@dannadori/voice-changer-client-js';\nimport { useAppState } from '../../context/AppContext';\nimport DragHandle from '../Helpers/DragHandle';\nimport { CSS_CLASSES } from '../../styles/constants';\nimport { useInitialPlaceholder } from '../../scripts/usePlaceholder';\nimport ModelInfo from './ModelInfo';\nimport ModelSettings from './ModelSettings';\n\ninterface ModelSettingsCardProps {\n  openModal: (type: string, props?: { model?: RVCModelSlot }) => void;\n  dndAttributes?: Record<string, any>;\n  dndListeners?: Record<string, any>;\n}\n\nfunction ModelSettingsCard({ openModal, dndAttributes, dndListeners }: ModelSettingsCardProps): JSX.Element {\n  const appState = useAppState() as ClientState; \n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [model, setModel] = useState<RVCModelSlot>();\n  \n  useEffect(() => {\n    setModel(appState.serverSetting.serverSetting.modelSlots[appState.serverSetting.serverSetting.modelSlotIndex]);\n  }, [appState.serverSetting?.serverSetting.modelSlotIndex, appState.serverSetting?.serverSetting.voiceChangerParams.model_dir]);\n\n  const handlePitchChange = (val: number) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      tran: val  \n    });\n  };\n\n  const handleFormatShiftChange = (val: number) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      formantShift: val  \n    });\n  };\n\n  const handleIndexRatioChange = (val: number) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      indexRatio: val  \n    });\n  };\n\n  const handleSpeakerChange = (val: number) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      dstId: val  \n    });\n  };\n\n  const handleSaveSettings = () => {\n    appState.serverSetting.updateModelDefault();\n  };\n  \n  const modelDir = appState.serverSetting.serverSetting.voiceChangerParams.model_dir;\n  const icon = (model?.iconFile && model?.iconFile.length > 0) ? \"http://127.0.0.1:18888/\" + modelDir  + \"/\" + model.slotIndex + \"/\" + model.iconFile.split(/[\\/\\\\]/).pop() : \"\";\n  const placeholder = useInitialPlaceholder(model?.name || \"\");\n  \n  return (\n    <div className={`p-4 border border-slate-200 dark:border-gray-700 rounded-md shadow-sm bg-white dark:bg-gray-800 transition-all duration-300 flex-1 min-h-0 flex flex-col ${isCollapsed ? 'h-auto' : ''}`}>\n      <div className=\"flex justify-between items-center mb-3 pb-2 border-b border-slate-200 dark:border-gray-700\">\n        <h4 className=\"text-lg font-semibold text-slate-800 dark:text-gray-200\">Model Settings</h4>\n        <div className=\"flex space-x-1 items-center\">\n          <button onClick={() => setIsCollapsed(!isCollapsed)} className={`${CSS_CLASSES.iconButton} focus:ring-blue-500`} title={isCollapsed ? \"Expand\" : \"Collapse\"}>\n            <FontAwesomeIcon icon={isCollapsed ? faChevronDown : faChevronUp} className=\"h-5 w-5\" />\n          </button>\n          <DragHandle attributes={dndAttributes} listeners={dndListeners} title=\"Drag\" />\n        </div>\n      </div>\n      {!isCollapsed && (\n        <>\n          {model ? (\n            <ModelInfo \n              model={model} \n              openModal={openModal} \n              icon={icon || placeholder} \n            />\n          ) : (\n            <div className=\"flex items-center justify-center mb-6 p-8 bg-slate-100 dark:bg-gray-700/50 rounded-lg min-h-[160px]\">\n              <p className=\"text-slate-500 dark:text-gray-400 italic text-center\">Select a model from the list <br/> to see its settings.</p>\n            </div>\n          )}\n          {\n            model && (\n              <ModelSettings \n                model={model} \n                handlePitchChange={handlePitchChange} \n                handleFormatShiftChange={handleFormatShiftChange} \n                handleIndexRatioChange={handleIndexRatioChange} \n                handleSpeakerChange={handleSpeakerChange} \n                setModel={setModel} \n              />\n            )\n          }\n        </>\n      )}\n      <div className=\"flex justify-end mt-4\">\n        <button\n          onClick={handleSaveSettings}\n          className={CSS_CLASSES.modalSecondaryButton}\n        >\n          Save Settings\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default ModelSettingsCard; ","// Custom Tooltip Component\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n    if (active && payload && payload.length) {\r\n      // Finde nur den MainProcessTime Wert\r\n      const mainProcessData = payload.find((entry: any) => entry.dataKey === 'perfTimeValue');\r\n      \r\n      if (mainProcessData) {\r\n        return (\r\n          <div className=\"bg-slate-800 border border-slate-600 rounded-md p-2 shadow-lg\">\r\n            <p className=\"text-slate-200 text-sm mb-1\">\r\n              {`Time: ${new Date(label).toLocaleTimeString()}`}\r\n            </p>\r\n            <p className=\"text-slate-300 text-sm\">\r\n              {`Main Process Time: ${Math.round(mainProcessData.value)} ms`}\r\n            </p>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n    return null;\r\n};\r\n\r\nexport default CustomTooltip;","import React, { JSX, useState, useEffect, useMemo, useCallback } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown, faPlayCircle, faStopCircle } from '@fortawesome/free-solid-svg-icons';\nimport { ResponsiveContainer, ComposedChart, Area, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport DragHandle from './../Helpers/DragHandle';\nimport { useThemeContext } from '../../context/ThemeContext';\nimport { useAppState } from '../../context/AppContext';\nimport CustomTooltip from './../Helpers/Tooltip';\n\n// Define types for the performance data\ninterface PerformanceMetrics {\n  vol: number;\n  responseTime: number;\n  mainprocessTime: number;\n}\n\ninterface ServerSettings {\n  serverReadChunkSize: number;\n  crossFadeOverlapSize: number;\n}\n\ninterface PerformanceStatsCardProps {\n  dndAttributes?: Record<string, any>;\n  dndListeners?: Record<string, any>;\n}\n\nconst DEFAULT_MAX_CHART_DATA_POINTS = 50;\n\ninterface ChartDataPoint {\n  timestamp: number;\n  perfTimeValue: number; // Stores mainprocessTime (perfTime) for the chart's Y-axis\n  greenTime?: number;\n  yellowTime?: number;\n  redTime?: number;\n}\n\ntype PerfStatus = 'good' | 'warning' | 'critical';\n\ninterface CalculatedMetricValues {\n  volumeDb: number;\n  ping: number;\n  totalLatencyTime: number;\n  perfTime: number;\n  chunkTime: number;\n  perfStatus: PerfStatus;\n}\n\ninterface RecordedDataEntry extends CalculatedMetricValues {\n  timestamp: number;\n  perfValueString: string; // e.g., \"15ms of 30ms\"\n}\n\nconst PERF_TEXT_CLASSES: Record<PerfStatus, string> = {\n  good: 'text-green-600 dark:text-green-400',\n  warning: 'text-yellow-600 dark:text-yellow-400',\n  critical: 'text-red-600 dark:text-red-400',\n};\n\nconst LATENCY_STATUS_FILL_HEX: Record<PerfStatus, string> = {\n  good: '#10B981',     // emerald-500\n  warning: '#F59E0B',  // amber-500\n  critical: '#EF4444', // red-500\n};\n\nconst CHART_LINE_COLOR_LIGHT_HEX = '#475569'; // slate-600\nconst CHART_LINE_COLOR_DARK_HEX = '#cbd5e1'; // slate-300\n\nconst DEFAULT_PERFORMANCE_METRICS: PerformanceMetrics = {\n  vol: 0.01, // Default to very low volume to avoid log(0)\n  responseTime: 0,\n  mainprocessTime: 0\n};\n\nfunction PerformanceStatsCard({ dndAttributes, dndListeners }: PerformanceStatsCardProps): JSX.Element {\n  const theme = useThemeContext();\n  const appState = useAppState();\n  \n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const performanceMetricKeys: string[] = [\"Vol\", \"Ping\", \"Total\", \"Perf\"];\n  const iconButtonClass = \"p-1 text-slate-500 hover:text-slate-700 dark:text-gray-400 dark:hover:text-gray-200\";\n\n  // Memoize performance data from appState, providing defaults\n  const currentPerformance = useMemo((): PerformanceMetrics => {\n    // Assuming these are direct properties on appState based on previous hook's access patterns\n    // and user's mention of appState.performance (which might mean stats *within* appState)\n    return {\n      vol: (appState as any).inputVolume ?? DEFAULT_PERFORMANCE_METRICS.vol,\n      responseTime: (appState as any).responseTime ?? DEFAULT_PERFORMANCE_METRICS.responseTime,\n      mainprocessTime: (appState as any).mainprocessTime ?? DEFAULT_PERFORMANCE_METRICS.mainprocessTime,\n    };\n  }, [appState]);\n\n  const [chartData, setChartData] = useState<ChartDataPoint[]>([]);\n  const [maxDataPoints, setMaxDataPoints] = useState(DEFAULT_MAX_CHART_DATA_POINTS);\n  const [isRecording, setIsRecording] = useState(false);\n  const [recordedData, setRecordedData] = useState<RecordedDataEntry[]>([]);\n\n  //Calculate the next DataPoint\n  const calculatedMetrics = useMemo((): CalculatedMetricValues => {\n    const volumeDb = Math.max(Math.round(20 * Math.log10(appState.performance.vol || 0.00001)), -90);\n    const chunkTime = ((appState.serverSetting.serverSetting.serverReadChunkSize * 128 * 1000) / 48000); // Assuming 48kHz sample rate, 128 samples per frame for chunk size unit\n    const totalLatencyTime = Math.ceil(chunkTime + appState.performance.responseTime + appState.serverSetting.serverSetting.crossFadeOverlapSize * 1000);\n\n    let perfStatus: PerfStatus = 'good';\n    const eightyPercentChunkTime = 0.8 * chunkTime;\n    if (appState.performance.mainprocessTime > chunkTime) {\n        perfStatus = 'critical';\n    } else if (appState.performance.mainprocessTime > eightyPercentChunkTime) { // totalLatencyTime <= chunkTime is implicit\n        perfStatus = 'warning';\n    }\n\n    return {\n      volumeDb,\n      ping: appState.performance.responseTime,\n      totalLatencyTime,\n      perfTime: appState.performance.mainprocessTime, // This is the original mainprocessTime\n      chunkTime,\n      perfStatus,\n    };\n  }, [currentPerformance, appState.serverSetting.serverSetting]);\n\n  //Format DataPoint into ChartDataPoint\n  useEffect(() => {\n    const { perfStatus, perfTime } = calculatedMetrics;\n\n    const roundedPerfTime = Math.round(perfTime);\n    let gt = 0, yt = 0, rt = 0;\n\n    if (perfStatus === 'good') gt = roundedPerfTime;\n    else if (perfStatus === 'warning') yt = roundedPerfTime;\n    else if (perfStatus === 'critical') rt = roundedPerfTime;\n\n    const newDataPoint: ChartDataPoint = {\n      timestamp: Date.now(),\n      perfTimeValue: roundedPerfTime, // Use the rounded perfTime for the chart line\n      greenTime: gt, yellowTime: yt, redTime: rt,\n    };\n\n    //Add DataPoint to ChartData\n    setChartData(prevData => {\n      const newChartData = [...prevData, newDataPoint];\n      return newChartData.length > maxDataPoints ? newChartData.slice(newChartData.length - maxDataPoints) : newChartData;\n    });\n\n    //Add DataPoint to RecordedData\n    if (isRecording) {\n      setRecordedData(prev => [...prev, {\n        timestamp: newDataPoint.timestamp,\n        ...calculatedMetrics,\n        perfValueString: `${Math.round(calculatedMetrics.totalLatencyTime)}ms of ${Math.round(calculatedMetrics.chunkTime)}ms`\n      }]);\n    }\n  }, [calculatedMetrics, maxDataPoints, isRecording]);\n\n  const displayValues: Record<string, { value: string | number; unit?: string; className?: string }> = {\n    Vol: { value: calculatedMetrics.volumeDb, unit: 'dB' },\n    Ping: { value: Math.round(calculatedMetrics.ping), unit: 'ms' },\n    Total: { value: Math.round(calculatedMetrics.totalLatencyTime), unit: 'ms' },\n    Perf: { // Display mainprocessTime (perfTime) vs chunkTime, colored by perfStatus\n      value: `${Math.round(calculatedMetrics.perfTime)}ms of ${Math.round(calculatedMetrics.chunkTime)}ms`, \n      className: PERF_TEXT_CLASSES[calculatedMetrics.perfStatus]\n    },\n  };\n\n  const downloadLogFile = useCallback(() => {\n    if (recordedData.length === 0) return;\n    const header = \"Timestamp,DateTime,Volume_dB,Ping_ms,TotalLatency_ms,PerfValue_ms,PerfChunk_ms,PerfStatus\\n\";\n    const logContent = recordedData.map(entry => \n      `${entry.timestamp},${new Date(entry.timestamp).toISOString()},${entry.volumeDb},${Math.round(entry.ping)},${Math.round(entry.totalLatencyTime)},${Math.round(entry.perfTime)},${Math.round(entry.chunkTime)},${entry.perfStatus}`\n    ).join(\"\\n\");\n    \n    const blob = new Blob([header + logContent], { type: 'text/csv;charset=utf-8' });\n    const link = document.createElement('a');\n    link.href = URL.createObjectURL(blob);\n    link.download = `performance_log_${new Date().toISOString().replace(/[:.]/g, '-')}.csv`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(link.href);\n    setRecordedData([]); // Clear data after download\n  }, [recordedData]);\n\n  const handleRecordToggle = () => {\n    if (isRecording) {\n      downloadLogFile();\n    }\n    setIsRecording(!isRecording);\n  };\n\n  return (\n    <div className={`p-4 border border-slate-200 dark:border-gray-700 rounded-md shadow-sm bg-white dark:bg-gray-800 transition-all duration-300 flex-1 min-h-0 flex flex-col ${isCollapsed ? 'h-auto' : ''}`}>\n      <div className=\"flex justify-between items-center mb-3 pb-2 border-b border-slate-200 dark:border-gray-700\">\n        <h5 className=\"text-lg font-semibold text-slate-700 dark:text-gray-200\">Performance Stats</h5>\n        <div className=\"flex space-x-1 items-center\">\n          <button onClick={() => setIsCollapsed(!isCollapsed)} className={iconButtonClass} title={isCollapsed ? \"Expand\" : \"Collapse\"}>\n            <FontAwesomeIcon icon={isCollapsed ? faChevronDown : faChevronUp} className=\"h-5 w-5\" />\n          </button>\n          <DragHandle attributes={dndAttributes} listeners={dndListeners} title=\"Drag\" />\n        </div>\n      </div>\n      {!isCollapsed && (\n        <div className=\"flex-grow flex flex-col items-center\">\n          <div className=\"flex justify-around w-full mb-3\">\n            {performanceMetricKeys.map(metricKey => {\n              const metricInfo = displayValues[metricKey];\n              return (\n                <span key={metricKey} className=\"text-xs font-medium text-slate-600 dark:text-gray-400\">\n                  {metricKey}:{' '}\n                  <span className={`text-slate-800 dark:text-gray-200 ${metricInfo.className || ''}`}>\n                    {metricInfo.value}\n                    {metricInfo.unit || ''}\n                  </span>\n                </span>\n              );\n            })}\n          </div>\n\n          <div className=\"flex justify-between items-center mb-2 w-full px-1\">\n            <button\n                onClick={handleRecordToggle}\n                className={`px-2 py-1 text-xs rounded flex items-center space-x-1.5 transition-colors duration-150 ${\n                    isRecording \n                    ? 'bg-red-500 hover:bg-red-600 text-white' \n                    : 'bg-green-500 hover:bg-green-600 text-white dark:bg-green-600 dark:hover:bg-green-700'\n                }`}\n                title={isRecording ? \"Stop Recording & Download CSV\" : \"Start Recording Performance Log\"}\n            >\n                <FontAwesomeIcon icon={isRecording ? faStopCircle : faPlayCircle} className=\"h-3 w-3\" />\n                <span>{isRecording ? 'Stop' : 'Record'}</span>\n            </button>\n            <div className=\"flex items-center space-x-2\">\n                <span className=\"text-xs text-slate-500 dark:text-gray-400 self-center\">History:</span>\n                {[20, 50, 100].map(num => (\n                    <button\n                        key={num}\n                        onClick={() => setMaxDataPoints(num)}\n                        className={`px-2 py-0.5 text-xs rounded ${maxDataPoints === num ? 'bg-blue-600 text-white dark:bg-blue-500' : 'bg-slate-200 dark:bg-gray-600 hover:bg-slate-300 dark:hover:bg-gray-500 text-slate-700 dark:text-gray-200'}`}\n                    >\n                        {num}\n                    </button>\n                ))}\n            </div>\n          </div>\n          \n          <div className=\"w-full h-48 bg-slate-100 dark:bg-gray-700 border border-slate-300 dark:border-gray-500 rounded-md flex-grow\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <ComposedChart data={chartData}>\n                <CartesianGrid strokeDasharray=\"3 3\" strokeOpacity={0.2} />\n                <XAxis \n                  dataKey=\"timestamp\" \n                  tickFormatter={(unixTime: number) => new Date(unixTime).toLocaleTimeString()} \n                  stroke=\"#94a3b8\"\n                  tick={{ fontSize: 10 }}\n                />\n                <YAxis \n                  label={{ value: 'ms', angle: -90, position: 'insideLeft', fill: '#94a3b8', fontSize: 12 }} \n                  stroke=\"#94a3b8\"\n                  tick={{ fontSize: 10 }}\n                  tickFormatter={(value: number) => String(Math.round(value))}\n                />\n                <Tooltip content={<CustomTooltip />} />\n                <Legend wrapperStyle={{fontSize: \"12px\", paddingTop: \"10px\"}} />\n                \n                {/* Area Charts für Hintergrund-Farbcodierung (ohne Tooltip-Anzeige) */}\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"greenTime\" \n                  stroke=\"none\" \n                  fill={LATENCY_STATUS_FILL_HEX.good} \n                  stackId=\"perfArea\" \n                  fillOpacity={0.4} \n                  name=\"\" \n                  legendType=\"none\" \n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"yellowTime\" \n                  stroke=\"none\" \n                  fill={LATENCY_STATUS_FILL_HEX.warning} \n                  stackId=\"perfArea\" \n                  fillOpacity={0.4} \n                  name=\"\" \n                  legendType=\"none\" \n                />\n                <Area \n                  type=\"monotone\" \n                  dataKey=\"redTime\" \n                  stroke=\"none\" \n                  fill={LATENCY_STATUS_FILL_HEX.critical} \n                  stackId=\"perfArea\" \n                  fillOpacity={0.4} \n                  name=\"\" \n                  legendType=\"none\" \n                />\n                \n                {/* Hauptlinie für MainProcessTime */}\n                <Line \n                  type=\"monotone\" \n                  dataKey=\"perfTimeValue\" \n                  stroke={theme.theme === 'dark' ? CHART_LINE_COLOR_DARK_HEX : CHART_LINE_COLOR_LIGHT_HEX} \n                  strokeWidth={2} \n                  dot={false} \n                  name=\"Main Process Time\" \n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default PerformanceStatsCard;","import { JSX, useState, useEffect } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport DragHandle from '../Helpers/DragHandle';\nimport DebouncedSlider from '../Helpers/DebouncedSlider';\nimport { useAppState } from '../../context/AppContext';\nimport { useUIContext } from '../../context/UIContext';\nimport { F0Detector, useIndexedDB } from '@dannadori/voice-changer-client-js';\nimport { CSS_CLASSES, INDEXEDDB_KEYS } from '../../styles/constants';\nimport { useAppRoot } from '../../context/AppRootProvider';\n\n// Props for icons\ninterface AiSettingsCardProps {\n  dndAttributes?: Record<string, any>;\n  dndListeners?: Record<string, any>;\n}\n\n// Interface for GPU options from server settings\ninterface GpuInfo {\n  id: number;\n  name: string;\n  backend?: string;\n  memory?: number;\n}\n\nconst f0Detectors = [\n  'crepe_full_onnx', 'crepe_tiny_onnx', 'crepe_full', 'crepe_tiny',\n  'rmvpe', 'rmvpe_onnx', 'fcpe', 'fcpe_onnx'\n]\n\nfunction AiSettingsCard({ dndAttributes, dndListeners }: AiSettingsCardProps): JSX.Element {\n  const appState = useAppState();\n  const uiState = useUIContext();\n  const { appGuiSettingState } = useAppRoot();\n  const edition = appGuiSettingState.edition;\n\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const { getItem, setItem } = useIndexedDB({ clientType: null });\n\n  // Local state for immediate slider labels\n  const [localSilentThreshold, setLocalSilentThreshold] = useState<number>(\n    appState.serverSetting?.serverSetting?.silentThreshold ?? -75\n  );\n  const [localChunkSize, setLocalChunkSize] = useState<number>(\n    appState.serverSetting?.serverSetting?.serverReadChunkSize\n      ? appState.serverSetting.serverSetting.serverReadChunkSize\n      : 5\n  );\n  const [localExtraSize, setLocalExtraSize] = useState<number>(\n    appState.serverSetting?.serverSetting?.extraConvertSize ?? 1\n  );\n\n  useEffect(() => {\n    const st = appState.serverSetting?.serverSetting?.silentThreshold;\n    setLocalSilentThreshold(st);\n  }, [appState.serverSetting?.serverSetting?.silentThreshold]);\n\n  useEffect(() => {\n    const cs = appState.serverSetting?.serverSetting?.serverReadChunkSize;\n    setLocalChunkSize(cs);\n  }, [appState.serverSetting?.serverSetting?.serverReadChunkSize]);\n\n  useEffect(() => {\n    const ex = appState.serverSetting?.serverSetting?.extraConvertSize;\n    setLocalExtraSize(ex);\n  }, [appState.serverSetting?.serverSetting?.extraConvertSize]);\n\n  // Load Output and Monitor from Cache\n  useEffect(() => {\n    const loadCache = async () => {\n        const echo = await getItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_ECHO);\n        if (echo) {\n          appState.setVoiceChangerClientSetting({\n            ...appState.setting.voiceChangerClientSetting,\n            echoCancel: echo as boolean\n          });\n        }\n        const noise1 = await getItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_NOISE1);\n        if (noise1) {\n          appState.setVoiceChangerClientSetting({\n            ...appState.setting.voiceChangerClientSetting,\n            noiseSuppression: noise1 as boolean\n          });\n        }\n        const noise2 = await getItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_NOISE2);\n        if (noise2) {\n          appState.setVoiceChangerClientSetting({\n            ...appState.setting.voiceChangerClientSetting,\n            noiseSuppression2: noise2 as boolean\n          });\n        }\n    };\n    loadCache();\n  }, []);\n\n  const handleChangeSilentThreshold = (value: number) => {\n    setLocalSilentThreshold(value);\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting?.serverSetting,\n      silentThreshold: value\n    });\n  };\n\n  const handleChangeChunkSize = (value: number) => {\n    setLocalChunkSize(value);\n    appState.setWorkletNodeSetting({ ...appState.setting.workletNodeSetting, inputChunkNum: Number(value) });\n    appState.trancateBuffer();\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting?.serverSetting,\n      serverReadChunkSize: value\n    });\n  };\n\n  const handleChangeExtraSize = (value: number) => {\n    setLocalExtraSize(value);\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting?.serverSetting,\n      extraConvertSize: value\n    });\n  };  \n\n  const handleChangeGpu = async (value: number) => {\n    await appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting?.serverSetting,\n      gpu: value\n    });\n  };\n\n  const handleChangeNoiseSuppression = (value: boolean) => {\n    appState.setVoiceChangerClientSetting({\n      ...appState.setting.voiceChangerClientSetting,\n      noiseSuppression: value\n    });\n    setItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_NOISE1, value);\n  };\n\n  const handleChangeNoiseSuppression2 = (value: boolean) => {\n    appState.setVoiceChangerClientSetting({\n      ...appState.setting.voiceChangerClientSetting,\n      noiseSuppression2: value\n    });\n    setItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_NOISE2, value);\n  };\n\n  const handleChangeEchoCancel = (value: boolean) => {\n    appState.setVoiceChangerClientSetting({\n      ...appState.setting.voiceChangerClientSetting,\n      echoCancel: value\n    });\n    setItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_ECHO, value);\n  };\n\n  const generateF0DetOptions = () => {\n    // DirectML can only use ONNX models\n    if (edition.indexOf(\"DirectML\") >= 0) {\n        const recommended = f0Detectors.filter(extractor => extractor.includes('_onnx'));\n        return Object.values(appState.serverSetting.serverSetting.voiceChangerParams).map((x) => {\n            if (recommended.includes(x)) {\n                return (\n                    <option key={x} value={x}>\n                        {x}\n                    </option>\n                );\n            } else {\n                return (\n                    <option key={x} value={x} disabled>\n                        {x}(N/A)\n                    </option>\n                );\n            }\n        });\n    } else {\n        return Object.values(f0Detectors).map((x) => {\n            return (\n                <option key={x} value={x}>\n                    {x}\n                </option>\n            );\n        });\n    }\n  };\n\n\n  return (\n    <div className={`p-4 border border-slate-200 dark:border-gray-700 rounded-md shadow-sm bg-white dark:bg-gray-800 transition-all duration-300 flex-1 min-h-0 flex flex-col ${isCollapsed ? 'h-auto' : 'overflow-y-auto'}`}>\n      <div className=\"flex justify-between items-center mb-3 pb-2 border-b border-slate-200 dark:border-gray-700\">\n        <h4 className={CSS_CLASSES.heading}>AI Settings</h4>\n        <div className=\"flex space-x-1 items-center\">\n          <button onClick={() => setIsCollapsed(!isCollapsed)} className={CSS_CLASSES.iconButton} title={isCollapsed ? \"Expand\" : \"Collapse\"}>\n            <FontAwesomeIcon icon={isCollapsed ? faChevronDown : faChevronUp} className=\"h-5 w-5\" />\n          </button>\n          <DragHandle attributes={dndAttributes} listeners={dndListeners} title=\"Drag\" />\n        </div>\n      </div>\n      {!isCollapsed && (\n        <div className=\"grid grid-cols-2 gap-x-4 gap-y-3\">\n          <div className=\"space-y-3\">\n            <div>\n              <label className={CSS_CLASSES.label}>Noise Reduction:</label>\n              <div className=\"space-y-1\">\n                <label className={CSS_CLASSES.checkboxLabel}>\n                  <input \n                    type=\"checkbox\" \n                    name=\"echoCancel\" \n                    className={CSS_CLASSES.checkbox} \n                    checked={appState.setting.voiceChangerClientSetting.echoCancel ?? false}\n                    onChange={(e) => handleChangeEchoCancel(e.target.checked)}\n                    disabled={appState.serverSetting.serverSetting.enableServerAudio === 1}\n                  /> Echo Cancellation\n                </label>\n                <label className={CSS_CLASSES.checkboxLabel}>\n                  <input \n                    type=\"checkbox\" \n                    name=\"noiseSuppression\" \n                    className={CSS_CLASSES.checkbox} \n                    checked={appState.setting.voiceChangerClientSetting.noiseSuppression ?? false}\n                    onChange={(e) => handleChangeNoiseSuppression(e.target.checked)}\n                    disabled={appState.serverSetting.serverSetting.enableServerAudio === 1}\n                  /> Noise Suppression\n                </label>\n                <label className={CSS_CLASSES.checkboxLabel}>\n                  <input \n                    type=\"checkbox\" \n                    name=\"noiseSuppression2\" \n                    className={CSS_CLASSES.checkbox} \n                    checked={appState.setting.voiceChangerClientSetting.noiseSuppression2 ?? false}\n                    onChange={(e) => handleChangeNoiseSuppression2(e.target.checked)}\n                    disabled={appState.serverSetting.serverSetting.enableServerAudio === 1}\n                  /> Noise Suppression 2\n                </label>\n              </div>\n            </div>\n            <div>\n              <label htmlFor=\"inSens\" className={CSS_CLASSES.label}>Input Sensitivity (In. Sens):</label>\n              <DebouncedSlider\n                id=\"inSens\"\n                name=\"inSens\"\n                min={-90}\n                max={-60}\n                step={1}\n                value={localSilentThreshold}\n                className={CSS_CLASSES.range}\n                onImmediateChange={setLocalSilentThreshold}\n                onChange={handleChangeSilentThreshold}\n              />\n              <p className={CSS_CLASSES.sliderValue}>{localSilentThreshold} dB</p>\n            </div>\n          </div>\n          <div className=\"space-y-3\">\n            <div>\n              <label htmlFor=\"chunk\" className={CSS_CLASSES.label}>Chunk Size:</label>\n              <DebouncedSlider\n                id=\"chunk\"\n                name=\"chunk\"\n                min={1}\n                max={1024}\n                step={1}\n                value={localChunkSize}\n                className={`${CSS_CLASSES.range} ${uiState.isConverting ? CSS_CLASSES.rangeDisabled : \"\"}`}\n                onImmediateChange={setLocalChunkSize}\n                onChange={handleChangeChunkSize}\n                disabled={uiState.isConverting}\n              />\n              <p className={CSS_CLASSES.sliderValue}>{((localChunkSize * 128 * 1000) / 48000).toFixed(1)}ms</p>\n            </div>\n            <div>\n              <label htmlFor=\"extra\" className={CSS_CLASSES.label}>Extra Processing Time (Extra):</label>\n              <DebouncedSlider\n                id=\"extra\"\n                name=\"extra\"\n                min={0}\n                max={5}\n                step={0.1}\n                value={localExtraSize}\n                className={`${CSS_CLASSES.range} ${uiState.isConverting ? CSS_CLASSES.rangeDisabled : \"\"}`}\n                onImmediateChange={setLocalExtraSize}\n                onChange={handleChangeExtraSize}\n                disabled={uiState.isConverting}\n              />\n              <p className={CSS_CLASSES.sliderValue}>{localExtraSize} s</p>\n            </div>\n            <div>\n              <label htmlFor=\"gpu\" className={CSS_CLASSES.label}>Processing Unit (GPU):</label>\n              <select \n                id=\"gpu\" \n                name=\"gpu\" \n                className={CSS_CLASSES.select} \n                value={appState.serverSetting?.serverSetting?.gpu ?? -1}\n                onChange={async (e) => {\n                  uiState.startLoading(`Changing to Processing Unit: ${appState.serverSetting?.serverSetting?.gpus?.find(gpu => gpu.id === parseInt(e.target.value))?.name}`);\n                  await handleChangeGpu(parseInt(e.target.value));\n                  uiState.stopLoading();\n                }}\n              >\n                {appState.serverSetting?.serverSetting?.gpus?.length && appState.serverSetting?.serverSetting?.gpus?.length > 0 ? (\n                  appState.serverSetting?.serverSetting?.gpus?.map((gpu: GpuInfo) => \n                  <option key={gpu.id} value={gpu.id}>\n                    {`${gpu.name} ${gpu.memory ? `(${(gpu.memory / 1024 / 1024 / 1024).toFixed(0)} GB)` : \"\"}`}\n                  </option>)\n                ) : (\n                  <option value=\"-1\" disabled>No GPUs available</option>\n                )}\n              </select>\n            </div>\n            <div>\n              <label htmlFor=\"f0Detector\" className={CSS_CLASSES.label}>Pitch Extraction Algorithm</label>\n              <select\n                id=\"f0Detector\"\n                className={CSS_CLASSES.select}\n                value={appState.serverSetting?.serverSetting?.f0Detector ?? ''}\n                disabled={uiState.isConverting}\n                onChange={async (e) => {\n                  uiState.startLoading(`Changing F0 Detector to ${e.target.value}`);\n                  await appState.serverSetting.updateServerSettings({\n                    ...appState.serverSetting?.serverSetting,\n                    f0Detector: e.target.value as F0Detector\n                  });\n                  uiState.stopLoading();\n                }}\n              >\n                {generateF0DetOptions()}\n              </select>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default AiSettingsCard; ","import { CSS_CLASSES } from \"../../styles/constants\";\nimport { useAppState } from \"../../context/AppContext\";\nimport { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { useUIContext } from \"../../context/UIContext\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\n\nfunction AudioMode({ audioState, setAudioState }: { audioState: \"client\" | \"server\"; setAudioState: Dispatch<SetStateAction<\"client\" | \"server\">>; }): JSX.Element {\n    const appState = useAppState();\n    const uiContext = useUIContext();\n    const [warningMessage, setWarningMessage] = useState<string | null>(null);\n\n    // Check if there are client audio devices that are not empty\n    const isClientAudioAvailable = \n        uiContext?.inputAudioDeviceInfo?.length > 0 &&\n        uiContext?.outputAudioDeviceInfo?.length > 0 && \n        uiContext?.inputAudioDeviceInfo[0].deviceId !== \"\" &&\n        uiContext?.outputAudioDeviceInfo[0].deviceId !== \"\";\n\n    // Check if there are server audio devices\n    const serverInputDevices = appState.serverSetting?.serverSetting?.serverAudioInputDevices;\n    const serverOutputDevices = appState.serverSetting?.serverSetting?.serverAudioOutputDevices;\n    const isServerAudioAvailable = \n        Array.isArray(serverInputDevices) && serverInputDevices.length > 0 &&\n        Array.isArray(serverOutputDevices) && serverOutputDevices.length > 0;\n\n    // Set the audio state based on the availability of client and server audio devices\n    useEffect(() => {\n        let newAudioState: \"client\" | \"server\" | null = null;\n        if (!isClientAudioAvailable && isServerAudioAvailable) {\n            newAudioState = \"server\";\n        } else if (isClientAudioAvailable && !isServerAudioAvailable) {\n            newAudioState = \"client\";\n        }\n\n        // Set the server audio state depending on availability\n        if (newAudioState && newAudioState !== audioState) {\n            setAudioState(newAudioState);\n            if (newAudioState === \"server\") {\n                appState.serverSetting.updateServerSettings({\n                    ...appState.serverSetting.serverSetting,\n                    enableServerAudio: 1\n                });\n            } else { // client\n                appState.serverSetting.updateServerSettings({\n                    ...appState.serverSetting.serverSetting,\n                    enableServerAudio: 0\n                });\n            }\n        }\n\n        // Update warning message\n        const messages = [];\n        if (!isClientAudioAvailable) {\n            messages.push(\"Client audio not available\");\n        }\n        if (!isServerAudioAvailable) {\n            messages.push(\"Server audio not available\");\n        }\n        setWarningMessage(messages.length > 0 ? messages.join(\" and \") + \".\" : null);\n\n    }, [isClientAudioAvailable, isServerAudioAvailable, appState.serverSetting, setAudioState, audioState]);\n\n\n    const handleClientRadioChange = () => {\n        if (!isClientAudioAvailable) return;\n        appState.serverSetting.updateServerSettings({\n            ...appState.serverSetting.serverSetting,\n            enableServerAudio: 0\n        })\n        setAudioState(\"client\")\n    }\n    \n    const handleServerRadioChange = () => {\n        if (!isServerAudioAvailable) return;\n        appState.serverSetting.updateServerSettings({\n            ...appState.serverSetting.serverSetting,\n            enableServerAudio: 1\n        })\n        setAudioState(\"server\")\n    }\n    \n    return (\n        <div className=\"space-y-4\">\n          <div className=\"pb-2 border-b border-slate-200 dark:border-gray-700\">\n            <div className=\"flex items-center mb-2\">\n                <label className=\"block text-sm font-medium text-slate-700 dark:text-gray-300\">Audio Processing</label>\n                {warningMessage && (\n                    <div className=\"ml-2 relative group\">\n                        <FontAwesomeIcon icon={faExclamationTriangle} className=\"text-yellow-500\" />\n                        <div className=\"absolute left-1/2 -translate-x-1/2 bottom-full mb-2 px-2 py-1 text-xs text-white bg-black rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap z-10\">\n                            {warningMessage}\n                        </div>\n                    </div>\n                )}\n            </div>\n            <div className=\"flex\">\n              <label className={`${CSS_CLASSES.radioLabel} ${!isClientAudioAvailable ? \"opacity-50 cursor-not-allowed\" : \"\"}`}>\n                <input\n                  type=\"radio\"\n                  className={CSS_CLASSES.radioButton}\n                  checked={audioState === \"client\"}\n                  onChange={handleClientRadioChange}\n                  disabled={!isClientAudioAvailable || uiContext.isConverting}\n                />\n                Client\n              </label>\n              <label className={`${CSS_CLASSES.radioLabel} ${!isServerAudioAvailable ? \"opacity-50 cursor-not-allowed\" : \"\"}`}>\n                <input\n                  type=\"radio\"\n                  className={CSS_CLASSES.radioButton }\n                  checked={audioState === \"server\"}\n                  onChange={handleServerRadioChange}\n                  disabled={!isServerAudioAvailable || uiContext.isConverting}\n                />\n                Server\n              </label>\n            </div>\n          </div>\n        </div>\n    )\n}\n\nexport default AudioMode;","import React, { useEffect, useMemo } from 'react';\nimport { CSS_CLASSES } from '../../styles/constants';\nimport { useAppState } from '../../context/AppContext';\nimport { useState } from 'react';\nimport { ServerAudioDevice } from '@dannadori/voice-changer-client-js/dist/const';\n\nfunction AudioDevicesServer() {\n  const appState = useAppState();\n  const sampleRates = [16000, 32000, 44100, 48000, 96000, 192000];\n\n  const [availableAudioDrivers, setAvailableAudioDrivers] = useState<string[]>([]);\n  const [selectedAudioDriver, setSelectedAudioDriver] = useState<string>('');\n \n  const [selectedInputDevice, setSelectedInputDevice] = useState<string>('');\n  const [selectedOutputDevice, setSelectedOutputDevice] = useState<string>('');\n  const [selectedMonitorDevice, setSelectedMonitorDevice] = useState<string>('');\n  const [selectedMonitorAudioDriver, setSelectedMonitorAudioDriver] = useState<string>('');\n  \n  const serverInputDevices = useMemo(() => {\n    return appState.serverSetting?.serverSetting?.serverAudioInputDevices\n          .filter(device => device.hostAPI === selectedAudioDriver);\n  }, [appState.serverSetting, selectedAudioDriver]);\n\n  const serverOutputDevices = useMemo(() => {\n    return appState.serverSetting?.serverSetting?.serverAudioOutputDevices\n          .filter(device => device.hostAPI === selectedAudioDriver);\n  }, [appState.serverSetting, selectedAudioDriver]);\n\n  const serverMonitorDevices = useMemo(() => {\n    if (!selectedMonitorAudioDriver) return [];\n    return appState.serverSetting?.serverSetting?.serverAudioOutputDevices\n          .filter(device => device.hostAPI === selectedMonitorAudioDriver);\n  }, [appState.serverSetting, selectedMonitorAudioDriver]);\n\n  \n  const handleSampleRateChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverInputAudioSampleRate: parseInt(event.target.value),\n      serverOutputAudioSampleRate: parseInt(event.target.value),\n      serverMonitorAudioSampleRate: parseInt(event.target.value)\n    });\n  };\n\n  const handleAudioDriverChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedAudioDriver(event.target.value);\n  };\n\n  const handleInputDeviceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverInputDeviceId: parseInt(event.target.value)\n    });\n  };\n\n  const handleOutputDeviceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverOutputDeviceId: parseInt(event.target.value)\n    });\n  };\n\n  const handleMonitorDeviceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverMonitorDeviceId: parseInt(event.target.value)\n    });\n  };\n\n  const handleInputChannelChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      asioInputChannel: parseInt(event.target.value)\n    });\n  };\n\n  const handleOutputChannelChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      asioOutputChannel: parseInt(event.target.value)\n    });\n  };\n\n  const handleMonitorAudioDriverChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const newDriver = event.target.value;\n    setSelectedMonitorAudioDriver(newDriver);\n  };\n\n  // Fetch server devices\n  const fetchServerDevices = async () => {\n    try {\n      const serverSettings = appState.serverSetting.serverSetting;\n      const inputs: ServerAudioDevice[] = serverSettings.serverAudioInputDevices || [];\n      const outputs: ServerAudioDevice[] = serverSettings.serverAudioOutputDevices || [];\n\n      // Extract unique hostAPIs for Audio Driver dropdown\n      const hostApis = new Set<string>();\n      inputs.forEach(device => device.hostAPI && hostApis.add(device.hostAPI));\n      outputs.forEach(device => device.hostAPI && hostApis.add(device.hostAPI));\n      const uniqueHostApis = Array.from(hostApis);\n      setAvailableAudioDrivers(uniqueHostApis);\n\n      // Set default selections for server devices and audio driver\n      if (inputs.length > 0 && (!selectedInputDevice || !selectedInputDevice.startsWith('server-'))) {\n        setSelectedInputDevice(`server-${inputs[0].index}`);\n      }\n      if (outputs.length > 0) {\n        if (!selectedOutputDevice || !selectedOutputDevice.startsWith('server-')) {\n          setSelectedOutputDevice(`server-${outputs[0].index}`);\n        }\n        if (!selectedMonitorDevice || !selectedMonitorDevice.startsWith('server-')) {\n          setSelectedMonitorDevice(`server-${outputs[0].index}`);\n        }\n      }\n      if (uniqueHostApis.length > 0 && !selectedAudioDriver) {\n        setSelectedAudioDriver(uniqueHostApis[0]);\n      }\n\n    } catch (err) {\n      console.error('Error fetching server devices:', err);\n    }\n  };\n  useEffect(() => {\n    fetchServerDevices();\n  }, [appState.serverSetting.serverSetting.enableServerAudio]);\n\n  useEffect(() => {\n    // Initialize or sync selectedMonitorAudioDriver with selectedAudioDriver\n    if (selectedAudioDriver && availableAudioDrivers.length > 0) {\n      if (!selectedMonitorAudioDriver || !availableAudioDrivers.includes(selectedMonitorAudioDriver)) {\n        if (availableAudioDrivers.includes(selectedAudioDriver)) {\n          setSelectedMonitorAudioDriver(selectedAudioDriver);\n        } else {\n          setSelectedMonitorAudioDriver(availableAudioDrivers[0]); // Fallback\n        }\n      }\n    }\n  }, [selectedAudioDriver, availableAudioDrivers, selectedMonitorAudioDriver]);\n\n  return (\n    <>\n      {/* Server-only settings */}\n      <div>\n        <label htmlFor=\"sampleRate\" className={CSS_CLASSES.label}>Sample Rate</label>\n        <select id=\"sampleRate\" className={CSS_CLASSES.select} value={appState.serverSetting?.serverSetting?.serverInputAudioSampleRate} onChange={handleSampleRateChange}>\n          {sampleRates.map(rate => (\n            <option key={rate} value={rate}>{rate} Hz</option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <label htmlFor=\"audioDriver\" className={CSS_CLASSES.label}>Audio Driver</label>\n        <select \n          id=\"audioDriver\" \n          className={CSS_CLASSES.select}\n          value={selectedAudioDriver}\n          onChange={handleAudioDriverChange}\n        >\n          {availableAudioDrivers.length === 0 ? (\n            <option value=\"\">No drivers available</option>\n          ) : (\n            availableAudioDrivers.map(driver => (\n              <option key={driver} value={driver}>{driver}</option>\n            ))\n          )}\n        </select>\n      </div>\n\n      <div className=\"space-y-2\">\n        <div className=\"flex items-end gap-2\">\n          {/* Input Device - 70% width */}\n          <div className={selectedAudioDriver === 'ASIO' ? 'w-[70%]' : 'w-full'}>\n            <label htmlFor=\"inputCh\" className={CSS_CLASSES.label}>\n              Input Device\n            </label>\n            <select \n              id=\"inputCh\" \n              className={`${CSS_CLASSES.select} w-full`}\n              value={appState.serverSetting.serverSetting.serverInputDeviceId}\n              onChange={handleInputDeviceChange}\n            >\n              {\n                serverInputDevices.length === 0 ? (\n                  <option value={-1}>No input devices found</option>\n                ) : (\n                  <>\n                  {\n                    !serverInputDevices.find(device => device.index === appState.serverSetting.serverSetting.serverInputDeviceId) && (\n                      <option value={-1}>No device selected</option>\n                    )\n                  }\n                  {\n                  serverInputDevices.map((device) => (\n                    <option \n                      key={device.index} \n                      value={device.index}\n                    >\n                      {`[${device.hostAPI}] ${device.name}`}\n                    </option>\n                  ))\n                }\n                </>\n                )\n              }\n            </select>\n          </div>\n\n          {/* Input Channel (only visible when ASIO is selected) - 30% width */}\n          {selectedAudioDriver === 'ASIO' && serverInputDevices.find(device => device.index === appState.serverSetting.serverSetting.serverInputDeviceId) && (\n            <div className=\"w-[30%]\">\n              <label htmlFor=\"inputChannel\" className={CSS_CLASSES.label}>\n                Channel\n              </label>\n              <select \n                id=\"inputChannel\" \n                className={`${CSS_CLASSES.select} w-full`}\n                value={appState.serverSetting.serverSetting.asioInputChannel}\n                onChange={handleInputChannelChange}\n              >\n                <option value={-1}>Default</option>\n                {\n                  Array.from({ \n                    length: serverInputDevices.find(device => device.index === appState.serverSetting.serverSetting.serverInputDeviceId)?.maxInputChannels || 0 }, \n                    (_, index) => (\n                      <option key={index} value={index}>{index}</option>\n                    )\n                  )\n                }\n              </select>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        <div className=\"flex items-end gap-2\">\n          {/* Output Device - 70% width */}\n          <div className={selectedAudioDriver === 'ASIO' ? 'w-[70%]' : 'w-full'}>\n            <label htmlFor=\"outputCh\" className={CSS_CLASSES.label}>\n              Output Device\n            </label>\n            <select \n              id=\"outputCh\" \n              className={`${CSS_CLASSES.select} w-full`}\n              value={appState.serverSetting.serverSetting.serverOutputDeviceId}\n              onChange={handleOutputDeviceChange}\n            >\n              {\n                serverOutputDevices.length === 0 ? (\n                  <option value={-1}>No output devices found</option>\n                ) : (\n                  <>\n                  {\n                    !serverOutputDevices.find(device => device.index === appState.serverSetting.serverSetting.serverOutputDeviceId) && (\n                      <option value={-1}>No device selected</option>\n                    )\n                  }\n                  {\n                  serverOutputDevices.map((device) => (\n                    <option \n                      key={device.index} \n                      value={device.index}\n                    >\n                      {`[${device.hostAPI}] ${device.name}`}\n                    </option>\n                  ))\n                }\n                </>\n                )\n              }\n            </select>\n          </div>\n\n          {/* Output Channel (only visible when ASIO is selected) - 30% width */}\n          {selectedAudioDriver === 'ASIO' && serverOutputDevices.find(device => device.index === appState.serverSetting.serverSetting.serverOutputDeviceId) && (\n            <div className=\"w-[30%]\">\n              <label htmlFor=\"outputChannel\" className={CSS_CLASSES.label}>\n                Channel\n              </label>\n              <select \n                id=\"outputChannel\" \n                className={`${CSS_CLASSES.select} w-full`}\n                value={appState.serverSetting.serverSetting.asioOutputChannel}\n                onChange={handleOutputChannelChange}\n              >\n                <option value={-1}>Default</option>\n                {\n                  Array.from({ \n                    length: serverOutputDevices.find(device => device.index === appState.serverSetting.serverSetting.serverOutputDeviceId)?.maxOutputChannels || 0 }, \n                    (_, index) => (\n                      <option key={index} value={index}>{index}</option>\n                    )\n                  )\n                }\n              </select>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Monitor Device & Driver */}\n      <div className=\"flex items-end gap-2\">\n        {/* Monitor Audio Driver Selector - 30% width */}\n        <div className=\"w-[30%]\">\n          <label htmlFor=\"monitorAudioDriver\" className={CSS_CLASSES.label}>\n            Monitor Driver\n          </label>\n          <select\n            id=\"monitorAudioDriver\"\n            className={`${CSS_CLASSES.select} w-full`}\n            value={selectedMonitorAudioDriver}\n            onChange={handleMonitorAudioDriverChange}\n          >\n            {availableAudioDrivers.length === 0 ? (\n              <option value=\"\">No drivers available</option>\n            ) : (\n              availableAudioDrivers.map(driver => (\n                <option key={driver} value={driver}>{driver}</option>\n              ))\n            )}\n          </select>\n        </div>\n\n        {/* Monitor Device Selector - 70% width */}\n        <div className=\"w-[70%]\">\n          <label htmlFor=\"monCh\" className={CSS_CLASSES.label}>\n            Monitor Device\n          </label>\n          <select\n            id=\"monCh\"\n            className={`${CSS_CLASSES.select} w-full`}\n            value={appState.serverSetting.serverSetting.serverMonitorDeviceId}\n            onChange={handleMonitorDeviceChange}\n            disabled={!selectedMonitorAudioDriver || serverMonitorDevices.length === 0}\n          >\n            {\n              serverMonitorDevices.length === 0 ? (\n                <option value={-1}>No devices for driver</option>\n              ) : (\n                <>\n                  <option value={-1}>No device selected</option>\n                  {\n                    serverMonitorDevices.map((device) => (\n                      <option\n                        key={device.index}\n                        value={device.index}\n                      >\n                        {`[${device.hostAPI}] ${device.name}`}\n                      </option>\n                    ))\n                  }\n                </>\n              )\n            }\n          </select>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default AudioDevicesServer;","import { JSX, useEffect, useState } from 'react';\nimport { useAppState } from '../../context/AppContext';\nimport { CSS_CLASSES } from '../../styles/constants';\nimport DebouncedSlider from '../Helpers/DebouncedSlider';\n\n// CSS Class Constants (can be moved to a shared file or passed as props if preferred)\n\nfunction AudioVolume(): JSX.Element {\n  const appState = useAppState();\n\n  const [inputGain, setInputGain] = useState(1);\n  const [outputGain, setOutputGain] = useState(1);\n  const [monitorGain, setMonitorGain] = useState(1); \n\n  useEffect(() => { \n    setInputGain(appState.serverSetting.serverSetting.serverInputAudioGain)\n    setOutputGain(appState.serverSetting.serverSetting.serverOutputAudioGain)\n    setMonitorGain(appState.serverSetting.serverSetting.serverMonitorAudioGain)\n  }, [appState.serverSetting.serverSetting.serverInputAudioGain, appState.serverSetting.serverSetting.serverOutputAudioGain, appState.serverSetting.serverSetting.serverMonitorAudioGain])\n\n  const handleInputGainChange = (value: number) => {\n    const gain = value / 100\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverInputAudioGain: gain\n    })  \n\n    appState.setVoiceChangerClientSetting({\n      ...appState.setting.voiceChangerClientSetting,\n      inputGain: gain\n    })\n  }\n\n  const handleOutputGainChange = (value: number) => {\n    const gain = value / 100\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverOutputAudioGain: gain\n    })\n\n    appState.setVoiceChangerClientSetting({\n      ...appState.setting.voiceChangerClientSetting,\n      outputGain: gain\n    })\n  }\n\n  const handleMonitorGainChange = (value: number) => {\n    const gain = value / 100\n    appState.serverSetting.updateServerSettings({\n      ...appState.serverSetting.serverSetting,\n      serverMonitorAudioGain: gain\n    })\n\n    appState.setVoiceChangerClientSetting({\n      ...appState.setting.voiceChangerClientSetting,\n      monitorGain: gain\n    })\n  }\n\n  return (\n    <>\n      <div>\n        <label htmlFor=\"inputGain\" className={CSS_CLASSES.label}>Input Volume</label>\n        <DebouncedSlider\n          id=\"inputGain\"\n          min={10}\n          max={250}\n          step={1}\n          value={Math.round(inputGain * 100)}\n          className={CSS_CLASSES.range}\n          onChange={handleInputGainChange}\n          onImmediateChange={(value) => setInputGain(value / 100)}\n        />\n        <p className={CSS_CLASSES.sliderValue}>{Math.round(inputGain * 100)}%</p>\n      </div>\n      <div>\n        <label htmlFor=\"outputGain\" className={CSS_CLASSES.label}>Output Volume</label>\n        <DebouncedSlider\n          id=\"outputGain\"\n          min={10}\n          max={400}\n          step={1}\n          value={Math.round(outputGain * 100)}\n          className={CSS_CLASSES.range}\n          onChange={handleOutputGainChange}\n          onImmediateChange={(value) => setOutputGain(value / 100)}\n        />\n        <p className={CSS_CLASSES.sliderValue}>{Math.round(outputGain * 100)}%</p>\n      </div>\n      <div>\n        <label htmlFor=\"monitorGain\" className={CSS_CLASSES.label}>Monitor Volume</label>\n        <DebouncedSlider\n          id=\"monitorGain\"\n          min={0}\n          max={400}\n          step={1}\n          value={Math.round(monitorGain * 100)}\n          className={CSS_CLASSES.range}\n          onChange={handleMonitorGainChange}\n          onImmediateChange={(value) => setMonitorGain(value / 100)}\n        />\n        <p className={CSS_CLASSES.sliderValue}>{Math.round(monitorGain * 100)}%</p>\n      </div>\n    </>\n  );\n}\n\nexport default AudioVolume;\n","import React, { JSX, useEffect } from 'react';\nimport { CSS_CLASSES, INDEXEDDB_KEYS } from '../../styles/constants';\nimport { useAppState } from '../../context/AppContext';\nimport { useIndexedDB } from '@dannadori/voice-changer-client-js';\nimport { useUIContext } from '../../context/UIContext';\n\ninterface ClientAudioDevice {\n  deviceId: string;\n  kind: string;\n  label: string;\n  groupId?: string;\n}\n\nfunction AudioDevicesClient(): JSX.Element {\n  const appState = useAppState();\n  const uiState = useUIContext();\n  const { getItem, setItem } = useIndexedDB({ clientType: null });\n\n  const handleInputDeviceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    appState.setting.voiceChangerClientSetting.audioInput = event.target.value;\n    setItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_AUDIO_INPUT, event.target.value);\n    uiState.setAudioInputForGUI(event.target.value);\n  };\n\n  const handleOutputDeviceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_AUDIO_OUTPUT, event.target.value);\n    uiState.setAudioOutputForGUI(event.target.value);\n  };\n\n  const handleMonitorDeviceChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_AUDIO_MONITOR, event.target.value);\n    uiState.setAudioMonitorForGUI(event.target.value);\n  };\n\n  // Load Output and Monitor from Cache\n  useEffect(() => {\n    const loadCache = async () => {\n        const output = await getItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_AUDIO_OUTPUT);\n        if (output) {\n            uiState.setAudioOutputForGUI(output as string);\n        }\n        const monitor = await getItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_AUDIO_MONITOR);\n        if (monitor) {\n            uiState.setAudioMonitorForGUI(monitor as string);\n        }\n        const input = await getItem(INDEXEDDB_KEYS.INDEXEDDB_KEY_AUDIO_INPUT);\n        if (input) {\n          appState.setVoiceChangerClientSetting({\n            ...appState.setting.voiceChangerClientSetting,\n            audioInput: input as string\n          });\n          uiState.setAudioInputForGUI(input as string);\n        }\n    };\n    loadCache();\n  }, []);\n\n  return (\n    <>\n      {/* Input Device */}\n      <div>\n        <label htmlFor=\"inputCh\" className={CSS_CLASSES.label}>\n          Input Device\n        </label>\n        <select \n          id=\"inputCh\" \n          className={CSS_CLASSES.select}\n          value={uiState.audioInputForGUI}\n          onChange={handleInputDeviceChange}\n        >\n          {\n            uiState.inputAudioDeviceInfo.length === 0 ? (\n              <option value=\"\">No input devices found</option>\n            ) : (\n              uiState.inputAudioDeviceInfo.map((device) => (\n                <option \n                  key={device.deviceId} \n                  value={device.deviceId}\n                >\n                  {device.label}\n                </option>\n              ))\n            )\n          }\n        </select>\n      </div>\n      \n      {/* Output Device */}\n      <div>\n        <label htmlFor=\"outputCh\" className={CSS_CLASSES.label}>\n          Output Device\n        </label>\n        <select \n          id=\"outputCh\" \n          className={CSS_CLASSES.select}\n          value={uiState.audioOutputForGUI}\n          onChange={handleOutputDeviceChange}\n        >              \n          {\n            uiState.outputAudioDeviceInfo.length === 0 ? (\n              <option value=\"\">No output devices found</option>\n            ) : (\n              uiState.outputAudioDeviceInfo.map((device) => (\n                <option \n                  key={device.deviceId} \n                  value={device.deviceId}\n                >\n                  {device.label}\n                </option>\n              ))\n            )\n          }\n        </select>\n      </div>\n      \n      {/* Monitor Device */}\n      <div>\n        <label htmlFor=\"monCh\" className={CSS_CLASSES.label}>\n          Monitor Device\n        </label>\n        <select \n          id=\"monCh\" \n          className={CSS_CLASSES.select}\n          value={uiState.audioMonitorForGUI}\n          onChange={handleMonitorDeviceChange}\n        >\n          {\n            uiState.outputAudioDeviceInfo.length === 0 ? (\n              <option value=\"\">No output devices found</option>\n            ) : (\n              uiState.outputAudioDeviceInfo.map((device) => (\n                <option \n                  key={device.deviceId} \n                  value={device.deviceId}\n                >\n                  {device.label}\n                </option>\n              ))\n            )\n          }\n        </select>\n      </div>\n    </>\n  );\n}\n\nexport default AudioDevicesClient;\n","import { JSX, useEffect, useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons';\nimport DragHandle from '../Helpers/DragHandle';\nimport { CSS_CLASSES } from '../../styles/constants';\nimport AudioMode from './AudioMode';\nimport AudioDevicesServer from './AudioDevicesServer';\nimport AudioVolume from './AudioVolume';\nimport AudioDevicesClient from './AudioDevicesClient';\nimport { useAppState } from '../../context/AppContext';\n\n// Props for icons\ninterface AudioSettingsCardProps {\n  dndAttributes?: Record<string, any>;\n  dndListeners?: Record<string, any>;\n}\n\nfunction AudioSettingsCard({ dndAttributes, dndListeners }: AudioSettingsCardProps): JSX.Element {\n  const appState = useAppState  ();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n  const [audioState, setAudioState] = useState<\"client\" | \"server\">(\"client\")\n\n  useEffect(() => {\n    if(appState.serverSetting.serverSetting.enableServerAudio == 1){\n      setAudioState(\"server\")\n    }else{\n      setAudioState(\"client\")\n    }\n  }, [appState.serverSetting.serverSetting.enableServerAudio]);\n  \n  return (\n    <div className={`p-4 border border-slate-200 dark:border-gray-700 rounded-md shadow-sm bg-white dark:bg-gray-800 transition-all duration-300 flex-1 min-h-0 flex flex-col ${isCollapsed ? 'h-auto' : 'overflow-y-auto'}`}>\n      <div className=\"flex justify-between items-center mb-3 pb-2 border-b border-slate-200 dark:border-gray-700\">\n        <div className=\"flex items-center\">\n          <h4 className={CSS_CLASSES.heading}>Audio Settings</h4>\n        </div>\n        <div className=\"flex space-x-1 items-center\">\n          <button \n            onClick={() => setIsCollapsed(!isCollapsed)} \n            className={CSS_CLASSES.iconButton} \n            title={isCollapsed ? \"Expand\" : \"Collapse\"}\n          >\n            <FontAwesomeIcon icon={isCollapsed ? faChevronDown : faChevronUp} className=\"h-5 w-5\" />\n          </button>\n          <DragHandle attributes={dndAttributes} listeners={dndListeners} title=\"Drag\" />\n        </div>\n      </div>\n      {!isCollapsed && (\n        <>\n          <AudioMode audioState={audioState} setAudioState={setAudioState}/>\n          {audioState === \"client\" ? <AudioDevicesClient /> : <AudioDevicesServer />}\n          <AudioVolume />\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default AudioSettingsCard; ","import { useState } from 'react';\r\nimport {\r\n    DndContext,\r\n    closestCenter,\r\n    PointerSensor,\r\n    useSensor,\r\n    useSensors,\r\n    DragEndEvent\r\n} from '@dnd-kit/core';\r\nimport {\r\n    arrayMove,\r\n    SortableContext,\r\n    // rectSwappingStrategy, // Consider if needed for 2x2 grid strategy\r\n    // sortableKeyboardCoordinates, // Re-add if KeyboardSensor is used\r\n} from '@dnd-kit/sortable';\r\n\r\nimport SortableCardItem from './Helpers/SortableCardItem';\r\nimport ModelSettingsCard from './ModelSettings/ModelSettingsCard';\r\nimport PerformanceStatsCard from './PerformanceStats/PerformanceStatsCard';\r\nimport AiSettingsCard from './AiSettings/AiSettingsCard';\r\nimport AudioSettingsCard from './AudioSettings/AudioSettingsCard';\r\nimport { RVCModelSlot } from '@dannadori/voice-changer-client-js'; // For openModal prop\r\n\r\n// Define Card IDs\r\nconst CARD_IDS = {\r\n    MODEL_SETTINGS: 'modelSettings',\r\n    PERFORMANCE: 'performance',\r\n    AI_SETTINGS: 'aiSettings',\r\n    AUDIO_SETTINGS: 'audioSettings',\r\n};\r\n\r\ninterface MainContentProps {\r\n  openModal: (type: string, props?: { modelId?: string; modelName?: string; model?: RVCModelSlot }) => void;\r\n}\r\n\r\nfunction MainContent({ openModal }: MainContentProps) {\r\n  const [cardOrder, setCardOrder] = useState<string[]>([\r\n    CARD_IDS.MODEL_SETTINGS,\r\n    CARD_IDS.PERFORMANCE,\r\n    CARD_IDS.AI_SETTINGS,\r\n    CARD_IDS.AUDIO_SETTINGS,\r\n  ]);\r\n\r\n  const sensors = useSensors(\r\n    useSensor(PointerSensor)\r\n  );\r\n\r\n  const handleDragEnd = (event: DragEndEvent) => {\r\n    const { active, over } = event;\r\n    if (over && active.id !== over.id) {\r\n      setCardOrder((items) => {\r\n        const oldIndex = items.indexOf(active.id as string);\r\n        const newIndex = items.indexOf(over.id as string);\r\n        return arrayMove(items, oldIndex, newIndex);\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <DndContext\r\n      sensors={sensors}\r\n      collisionDetection={closestCenter}\r\n      onDragEnd={handleDragEnd}\r\n    >\r\n      <SortableContext\r\n        items={cardOrder}\r\n        // strategy={rectSwappingStrategy} // Default strategy works well with grid\r\n      >\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          {cardOrder.map((cardId) => {\r\n            let cardComponent;\r\n            switch (cardId) {\r\n              case 'modelSettings':\r\n                cardComponent = (\r\n                  <SortableCardItem key={cardId} id={cardId}>\r\n                    {(attributes, listeners) => (\r\n                      <ModelSettingsCard openModal={openModal} dndAttributes={attributes} dndListeners={listeners} />\r\n                    )}\r\n                  </SortableCardItem>\r\n                );\r\n                break;\r\n              case 'performance':\r\n                cardComponent = (\r\n                  <SortableCardItem key={cardId} id={cardId}>\r\n                    {(attributes, listeners) => (\r\n                      <PerformanceStatsCard dndAttributes={attributes} dndListeners={listeners} />\r\n                    )}\r\n                  </SortableCardItem>\r\n                );\r\n                break;\r\n              case 'aiSettings':\r\n                cardComponent = (\r\n                  <SortableCardItem key={cardId} id={cardId}>\r\n                    {(attributes, listeners) => (\r\n                      <AiSettingsCard dndAttributes={attributes} dndListeners={listeners} />\r\n                    )}\r\n                  </SortableCardItem>\r\n                );\r\n                break;\r\n              case 'audioSettings':\r\n                cardComponent = (\r\n                  <SortableCardItem key={cardId} id={cardId}>\r\n                    {(attributes, listeners) => (\r\n                      <AudioSettingsCard dndAttributes={attributes} dndListeners={listeners} />\r\n                    )}\r\n                  </SortableCardItem>\r\n                );\r\n                break;\r\n              default:\r\n                cardComponent = null;\r\n            }\r\n            return cardComponent;\r\n          })}\r\n        </div>\r\n      </SortableContext>\r\n    </DndContext>\r\n  );\r\n}\r\n\r\nexport default MainContent; ","import './App.css';\nimport LeftSidebar from './components/LeftSideBar/Sidebar';\nimport BottomBar from './components/BottomBar/BottomBar';\nimport { JSX, useState, useEffect, ReactNode } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faBars, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport GenericModal from './components/Modals/GenericModal';\nimport AdvancedSettingsModal from './components/BottomBar/Modals/AdvancedSettingsModal';\nimport ServerInfoModal from './components/BottomBar/Modals/ServerInfoModal';\nimport ClientInfoModal from './components/BottomBar/Modals/ClientInfoModal';\nimport EditModelModal from './components/LeftSideBar/Modals/EditModelModal';\nimport DeleteModelModal from './components/LeftSideBar/Modals/DeleteModelModal';\nimport PassthroughConfirmModal, { PassthroughConfirmModalProps } from './components/BottomBar/Modals/PassthroughConfirmModal';\nimport { RVCModelSlot } from '@dannadori/voice-changer-client-js';\nimport MainContent from './components/MainContent';\n\nconst MD_BREAKPOINT = 768; // Typical Tailwind md breakpoint\n\n// Define a more flexible type for modalProps passed to openModal\ninterface ModelRelatedProps {\n    modelId?: string; \n    modelName?: string;\n    model?: RVCModelSlot; \n}\n\n// Combine with PassthroughConfirmModalProps (excluding closeModal as it's added by App.tsx)\ntype OpenModalProps = ModelRelatedProps | (Omit<PassthroughConfirmModalProps, 'closeModal'> & { typeSpecificProp?: any });\n\ninterface CurrentModalState {\n  content: ReactNode | null;\n  title: string;\n  props?: OpenModalProps; \n  primaryButton?: { text: string; onClick: () => void; className?: string };\n  secondaryButton?: { text: string; onClick: () => void; className?: string };\n  transparent?: boolean;\n}\n\nfunction App(): JSX.Element {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(window.innerWidth >= MD_BREAKPOINT);\n  const [currentModal, setCurrentModal] = useState<CurrentModalState | null>(null);\n\n  useEffect(() => {\n    const breakpointHandleResize = () => {\n      const currentIsDesktop = window.innerWidth >= MD_BREAKPOINT;\n      setIsSidebarOpen(currentIsDesktop);\n    };\n\n    window.addEventListener('resize', breakpointHandleResize);\n    breakpointHandleResize(); \n\n    return () => window.removeEventListener('resize', breakpointHandleResize);\n  }, []);\n\n  const toggleSidebar = () => {\n    setIsSidebarOpen(!isSidebarOpen);\n  };\n\n  const closeModal = () => {\n    setCurrentModal(null);\n  };\n\n  const openModal = (type: string, modalProps?: OpenModalProps) => {\n    let modalDetails: Partial<CurrentModalState> = { content: null, title: '' };\n    let finalPropsForContent: any = modalProps || {}; // Pass all modalProps to content by default\n\n    switch (type) {\n      case 'advancedSettings':\n        modalDetails = { title: 'Advanced Settings', content: <AdvancedSettingsModal />,\n          primaryButton: { text: 'Save', onClick: () => { alert('Saving...'); closeModal(); } },\n          secondaryButton: { text: 'Close', onClick: () => { closeModal(); } } };\n        break;\n      case 'serverInfo':\n        modalDetails = { title: 'Server Info', content: <ServerInfoModal />,\n          secondaryButton: { text: 'Close', onClick: () => { closeModal(); } } };\n        break;\n      case 'clientInfo':\n        modalDetails = { title: 'Client Info', content: <ClientInfoModal />,\n          secondaryButton: { text: 'Close', onClick: () => { closeModal(); } } };\n        break;\n      case 'editModel':\n        const editProps = modalProps as ModelRelatedProps;\n        if (editProps?.model) {\n          modalDetails = { title: `Edit Model: ${editProps.model.name}`, content: <EditModelModal modelId={editProps.model.slotIndex.toString()} modelName={editProps.model.name} />,\n            primaryButton: { text: 'Save Changes', onClick: () => { alert(`Saving ${editProps.model?.name}...`); closeModal(); } } };\n        } else if (editProps?.modelId && editProps?.modelName) {\n            modalDetails = { title: `Edit Model: ${editProps.modelName}`, content: <EditModelModal modelId={editProps.modelId} modelName={editProps.modelName} />,\n            primaryButton: { text: 'Save Changes', onClick: () => { alert(`Saving ${editProps.modelName}...`); closeModal(); } } };\n        }\n        finalPropsForContent = editProps; // Ensure modelId, modelName are passed to CurrentModalState.props\n        break;\n      case 'deleteModel':\n        const deleteProps = modalProps as ModelRelatedProps;\n        if (deleteProps?.model) {\n            modalDetails = { title: `Delete Model: ${deleteProps.model.name}`, content: <DeleteModelModal modelId={deleteProps.model.slotIndex.toString()} modelName={deleteProps.model.name} />,\n            primaryButton: { text: 'Delete', onClick: () => { alert(`Deleting ${deleteProps.model?.name}...`); closeModal(); }, className: 'bg-red-600 hover:bg-red-700 focus:ring-red-500 text-white' },\n            secondaryButton: { text: 'Cancel', onClick: closeModal }};\n        } else if (deleteProps?.modelId && deleteProps?.modelName) {\n            modalDetails = { title: `Delete Model: ${deleteProps.modelName}`, content: <DeleteModelModal modelId={deleteProps.modelId} modelName={deleteProps.modelName} />,\n            primaryButton: { text: 'Delete', onClick: () => { alert(`Deleting ${deleteProps.modelName}...`); closeModal(); }, className: 'bg-red-600 hover:bg-red-700 focus:ring-red-500 text-white' },\n            secondaryButton: { text: 'Cancel', onClick: closeModal }};\n        }\n        finalPropsForContent = deleteProps;\n        break;\n      case 'passThrough':\n        const passThroughProps = modalProps as Omit<PassthroughConfirmModalProps, 'closeModal'>;\n        modalDetails = {\n          title: passThroughProps.title || 'Confirm',\n          content: <PassthroughConfirmModal {...passThroughProps} closeModal={closeModal} />\n        };\n        finalPropsForContent = passThroughProps;\n        break;\n      default:\n        console.warn('Unknown modal type:', type);\n        return;\n    }\n    \n    setCurrentModal({ \n      title: modalDetails.title || 'Modal',\n      content: modalDetails.content,\n      props: finalPropsForContent,\n      primaryButton: modalDetails.primaryButton,\n      secondaryButton: modalDetails.secondaryButton,\n      transparent: false\n    });\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen font-sans bg-slate-50 dark:bg-gray-900 transition-colors duration-300\">\n      <button\n        onClick={toggleSidebar}\n        className=\"md:hidden p-2 text-gray-600 dark:text-gray-300 fixed top-3 left-3 z-30 bg-gray-200 dark:bg-gray-700 rounded-md shadow\"\n        aria-label=\"Toggle sidebar\"\n      >\n        <FontAwesomeIcon icon={isSidebarOpen ? faTimes : faBars} size=\"lg\" />\n      </button>\n\n      <div className={`flex flex-grow overflow-hidden ${!isSidebarOpen && window.innerWidth < MD_BREAKPOINT ? 'pt-0' : 'pt-12'} md:pt-0`}> \n        <LeftSidebar \n          isSidebarOpen={isSidebarOpen} \n          toggleSidebar={toggleSidebar} \n          openModal={openModal}\n        />\n        \n        <main className=\"flex-grow p-4 overflow-y-auto\">\n          <MainContent openModal={openModal} />\n        </main>\n      </div>\n      <BottomBar openModal={openModal} />\n\n      { currentModal && currentModal.content &&\n        <GenericModal\n          isOpen={!!currentModal}\n          onClose={closeModal}\n          title={currentModal.title}\n          primaryButton={currentModal.primaryButton}\n          secondaryButton={currentModal.secondaryButton}\n        >\n          {currentModal.content}\n        </GenericModal>\n      }\n    </div>\n  );\n}\n\nexport default App; ","import React, { useEffect, useRef } from 'react';\n\ninterface Particle {\n  x: number;\n  y: number;\n  vx: number;\n  vy: number;\n  radius: number;\n  alpha: number;\n  color: string;\n}\n\ninterface ParticleProps {\n  zIndex?: number;\n  particleCount?: number;\n  particleColor?: string;\n  backgroundColor?: string;\n}\n\nconst ParticleBackground: React.FC<ParticleProps> = ({\n  zIndex = 50,\n  particleCount = 50,\n  particleColor = 'rgba(200, 200, 255, 0.7)',\n  backgroundColor = 'white'\n}) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const particlesArray = useRef<Particle[]>([]);\n  const animationFrameId = useRef<number>();\n\n  // Using the particleColor and particleCount from props\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) return;\n\n    const setCanvasSize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n    };\n\n    setCanvasSize();\n    window.addEventListener('resize', setCanvasSize);\n\n    const createParticles = (count: number, color: string) => {\n      particlesArray.current = [];\n      for (let i = 0; i < count; i++) {\n        particlesArray.current.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          vx: Math.random() * 1 - 0.5, // -0.5 to 0.5\n          vy: Math.random() * 1 - 0.5, // -0.5 to 0.5\n          radius: Math.random() * 2 + 1, // 1 to 3\n          alpha: Math.random() * 0.5 + 0.2, // 0.2 to 0.7\n          color: color,\n        });\n      }\n    };\n\n    createParticles(particleCount, particleColor);\n\n    const animateParticles = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      particlesArray.current.forEach(particle => {\n        particle.x += particle.vx;\n        particle.y += particle.vy;\n\n        // Boundary checks (wrap around)\n        if (particle.x < 0) particle.x = canvas.width;\n        if (particle.x > canvas.width) particle.x = 0;\n        if (particle.y < 0) particle.y = canvas.height;\n        if (particle.y > canvas.height) particle.y = 0;\n\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2, false);\n        ctx.fillStyle = particle.color;\n        ctx.globalAlpha = particle.alpha;\n        ctx.fill();\n      });\n      ctx.globalAlpha = 1; // Reset global alpha\n\n      animationFrameId.current = requestAnimationFrame(animateParticles);\n    };\n\n    animateParticles();\n\n    return () => {\n      window.removeEventListener('resize', setCanvasSize);\n      if (animationFrameId.current) {\n        cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      style={{\n        position: 'fixed',\n        top: 0,\n        left: 0,\n        width: '100vw',\n        height: '100vh',\n        zIndex: zIndex, // Position it just behind the modal overlay (which is z-50)\n        pointerEvents: 'none', // Make sure it doesn't interfere with clicks\n        backgroundColor: backgroundColor\n      }}\n    />\n  );\n};\n\nexport default ParticleBackground;\n","import React from 'react';\n\ninterface WelcomeModalProps {\n  onGetStarted: () => void | Promise<void>;\n}\n\nconst WelcomeModal: React.FC<WelcomeModalProps> = ({ onGetStarted }) => {\n  return (\n    <div className=\"text-center\">\n      <div className=\"mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">\n          Welcome to the Voice Changer App\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-300\">\n          Click on \"Continue\" to start the application and initialize the audio engine.\n        </p>\n      </div>\n      \n      <div className=\"mb-4 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n        <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n          <strong>Note:</strong> For optimal functionality, this app requires access to your audio system.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default WelcomeModal;","import React from 'react';\nimport { AppContextProvider } from './context/AppContext';\nimport App from './App';\nimport ParticleBackground from './components/Helpers/ParticleBackground';\nimport GenericModal from './components/Modals/GenericModal';\nimport WelcomeModal from './components/Modals/WelcomeModal';\nimport { UIContextProvider } from './context/UIContext';\nimport { ThemeProvider, useThemeContext } from './context/ThemeContext';\n\nconst AppContent: React.FC = () => {\n  const [showWelcome, setShowWelcome] = React.useState<boolean>(true);\n  const { theme } = useThemeContext();\n\n  const handleWelcomeComplete = async () => {\n    setShowWelcome(false);\n  };\n\n  // Theme-based particle configuration\n  const getParticleConfig = () => {\n    if (theme === 'dark') {\n      return {\n        particleColor: \"rgba(147, 197, 253, 0.6)\", // Light blue particles for dark theme\n        backgroundColor: \"rgb(17, 24, 39)\" // Dark background\n      };\n    } else {\n      return {\n        particleColor: \"rgba(59, 130, 246, 0.4)\", // Darker blue particles for light theme\n        backgroundColor: \"rgb(248, 250, 252)\" // Light background\n      };\n    }\n  };\n\n  const particleConfig = getParticleConfig();\n\n  if (showWelcome) {\n    return (\n      <>\n        <ParticleBackground \n          zIndex={1} \n          particleCount={100} \n          particleColor={particleConfig.particleColor}\n          backgroundColor={particleConfig.backgroundColor}\n        />\n          <GenericModal\n            isOpen={true}\n            transparent={true}\n            onClose={handleWelcomeComplete}\n            title=\"RVC VoiceChanger\"\n            primaryButton={{\n              text: \"Continue\",\n              onClick: handleWelcomeComplete\n          }}\n        >\n          <WelcomeModal onGetStarted={handleWelcomeComplete} />\n        </GenericModal>\n\n      </>\n    );\n  }\n  \n  return (\n    <>\n      <AppContextProvider>\n        <UIContextProvider>\n          <App />\n        </UIContextProvider>\n      </AppContextProvider>\n    </>\n  );\n};\n\nexport const AppWrapper: React.FC = () => {\n  return (\n    <ThemeProvider>\n      <AppContent />\n    </ThemeProvider>\n  );\n};","import ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport { AppRootProvider } from './context/AppRootProvider';\r\nimport { ThemeProvider } from './context/ThemeContext';\r\nimport { AppWrapper } from './AppWrapper';\r\n\r\nconst rootElement = document.getElementById('root');\r\n\r\nif (!rootElement) throw new Error('Failed to find the root element'); // Type guard\r\n\r\nconst root = ReactDOM.createRoot(rootElement);\r\n\r\nroot.render(\r\n    <ThemeProvider>\r\n        <AppRootProvider>\r\n          <AppWrapper />\r\n        </AppRootProvider>\r\n    </ThemeProvider>\r\n);\r\n","import { useEffect, useState } from \"react\"\r\n\r\nexport type AudioConfigState = {\r\n    audioContext: AudioContext | null\r\n}\r\nexport const useAudioConfig = (): AudioConfigState => {\r\n    const [audioContext, setAudioContext] = useState<AudioContext | null>(null)\r\n\r\n    useEffect(() => {\r\n        const createAudioContext = () => {\r\n\r\n            const url = new URL(window.location.href);\r\n            // TODO: This must be a proper option in UI.\r\n            const sampleRate = url.searchParams.get('sample_rate')\r\n            const ctx: AudioContext = sampleRate\r\n                ? new AudioContext({ sampleRate: Number(sampleRate)})\r\n                : new AudioContext({ sampleRate: 48000 })\r\n\r\n            console.log('Base context', ctx)\r\n            setAudioContext(ctx)\r\n\r\n            document.removeEventListener('touchstart', createAudioContext);\r\n            document.removeEventListener('mousedown', createAudioContext);\r\n        }\r\n        document.addEventListener('touchstart', createAudioContext, false);\r\n        document.addEventListener('mousedown', createAudioContext, false);\r\n    }, [])\r\n\r\n    return {\r\n        audioContext\r\n    }\r\n}"],"names":["InitialAppGuiDemoSetting","type","front","AppRootContext","createContext","useAppRoot","context","useContext","Error","ThemeContext","undefined","useThemeContext","state","ThemeProvider","children","theme","setTheme","useState","storedTheme","localStorage","getItem","window","matchMedia","matches","useEffect","setItem","document","documentElement","classList","add","remove","Provider","value","toggleTheme","prevTheme","AppStateContext","useAppState","AppContextProvider","appRoot","clientState","props","audioContext","audioContextState","useClient","initializedRef","useRef","initialized","current","getInfo","setWorkletNodeSetting","setting","workletNodeSetting","serverUrl","providerValue","message","className","errors","removeError","map","err","onClick","id","UIContext","UIContextProvider","appState","isLoading","setIsLoading","isConverting","setIsConverting","inputAudioDeviceInfo","setInputAudioDeviceInfo","outputAudioDeviceInfo","setOutputAudioDeviceInfo","audioInputForGUI","setAudioInputForGUI","audioOutputForGUI","setAudioOutputForGUI","audioMonitorForGUI","setAudioMonitorForGUI","loadingMessage","setLoadingMessage","setErrors","idRef","startLoading","useCallback","stopLoading","showError","prev","setTimeout","filter","checkDeviceAvailable","_reloadDeviceInfo","async","navigator","mediaDevices","getUserMedia","video","audio","getTracks","forEach","x","stop","e","mediaDeviceInfos","enumerateDevices","kind","serverSetting","serverAudioStated","isMounted","pollDevices","checkDeviceDiff","knownDeviceIds","newDeviceIds","deleted","Set","has","added","audioInfo","knownAudioinputIds","deviceId","newAudioinputIds","knownAudiooutputIds","newAudiooutputIds","audioInputDiff","audioOutputDiff","size","reloadDeviceInfo","useUIContext","useInitialPlaceholder","name","options","useMemo","backgroundColor","textColor","shape","fontSize","fontFamily","initial","charAt","toUpperCase","bgColor","hash","split","reduce","a","b","charCodeAt","colors","Math","abs","length","btoa","icon","model","iconFile","modelDir","slotIndex","pop","placeholder","selected","handleSelectModel","src","alt","stopPropagation","openModal","title","filteredAndSortedModels","confirmedSelectedSlotIndex","voiceChangerParams","model_dir","CSS_CLASSES","INDEXEDDB_KEYS","sortOptions","label","setFilteredAndSortedModels","searchTerm","setSearchTerm","currentSort","setCurrentSort","typeVersionFilter","setTypeVersionFilter","rateFilter","setRateFilter","embedderFilter","setEmbedderFilter","isSortFilterVisible","setIsSortFilterVisible","sortDirection","setSortDirection","localModels","modelSlots","slot","voiceChangerType","VoiceChangerType","RVC","modelTypeVersionOptions","types","Array","from","sort","sampleRateOptions","rates","samplingRate","embedderOptions","embedders","embedder","processedModels","toLowerCase","includes","version","comparison","localeCompare","onChange","target","htmlFor","opt","Number","isOpen","onClose","primaryButton","secondaryButton","transparent","closeOnOutsideClick","modalRoot","getElementById","createPortal","getModalWidth","disabled","text","guiState","showUpload","setShowUpload","uploadSettings","setUploadSettings","modelName","thumbnailFile","isSampleMode","sampleId","files","params","thumbnailPreview","setThumbnailPreview","isThumbnailExpanded","setIsThumbnailExpanded","previewMode","setPreviewMode","find","baseName","file","substring","lastIndexOf","handleUploadCloseModal","isUploading","commonLabelClass","commonInputClass","commonFileInputClass","uploadProgress","toFixed","trim","emptySlotIndex","currentModelSlots","findIndex","filesForUpload","dir","push","uploadSettingsData","uploadModel","uploadAssets","reloadServerInfo","error","String","accept","event","newFile","updatedFiles","f","replace","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","reader","FileReader","onloadend","result","readAsDataURL","isSidebarOpen","toggleSidebar","modelSlotIndex","sidebarClasses","finalSidebarClasses","updateServerSettings","sampleRate","setSampleRate","setEmbedder","searchText","setSearchText","onFilterChange","handleSampleRateChange","newSampleRate","rate","handleEmbedderChange","newEmbedder","models","selectedModels","onModelToggle","onPercentageChange","isModelSelected","some","m","isSelected","percentage","found","getModelPercentage","generatePlaceholder","handleModelCardClick","checked","min","max","sum","downloadModel","setDownloadModel","saveToMergeSlot","setSaveToMergeSlot","saveToEmptySlot","setSaveToEmptySlot","emptySlots","handleDownloadModelChange","handleMergeSlotChange","handleEmptySlotChange","showMerge","setShowMerge","setSelectedModels","getEmptySlots","getFirstEmptySlot","handleClose","filteredModels","mergedModelBlob","validMergeElements","mergeModel","command","strength","response","fetch","blob","url","URL","createObjectURL","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","mergedModelFile","File","uiContext","startWithAudioContextCreate","setStartWithAudioContextCreate","start","handleStart","enableServerAudio","voiceChangerClientSetting","audioInput","Promise","resolve","serverInputDeviceId","serverOutputDeviceId","handleStop","buttonBaseClass","lightButtonClass","skipConfirmation","passThroughConfirmationSkip","passThrough","iconClassName","confirmText","cancelText","onConfirm","onImmediateChange","rest","internalValue","setInternalValue","debouncedChange","callback","delay","timeoutRef","debouncedFn","args","clearTimeout","useDebouncedCallback","val","valueAsNumber","uiState","localCrossFadeOverlapSize","setLocalCrossFadeOverlapSize","crossFadeOverlapSize","localProtect","setLocalProtect","protect","crossFade","commonSelectClass","commonRangeClass","commonCheckboxLabelClass","uiLanguage","protocol","step","silenceFront","forceFp32","disableJit","useONNX","setVoiceChangerClientSetting","serverJson","JSON","stringify","clientJson","modelId","onCancel","closeModal","attributes","listeners","setNodeRef","transform","transition","isDragging","style","Transform","toString","opacity","display","ref","modelTypeDisplay","isONNX","modelTypeOnnx","modelType","handlePitchChange","handleFormatShiftChange","handleIndexRatioChange","handleSpeakerChange","setModel","speakerOptions","speakers","Object","keys","entries","defaultTune","defaultFormantShift","indexFile","defaultIndexRatio","dndAttributes","dndListeners","isCollapsed","setIsCollapsed","tran","formantShift","indexRatio","dstId","updateModelDefault","active","payload","mainProcessData","entry","dataKey","Date","toLocaleTimeString","round","PERF_TEXT_CLASSES","good","warning","critical","LATENCY_STATUS_FILL_HEX","DEFAULT_PERFORMANCE_METRICS","currentPerformance","vol","inputVolume","responseTime","mainprocessTime","chartData","setChartData","maxDataPoints","setMaxDataPoints","isRecording","setIsRecording","recordedData","setRecordedData","calculatedMetrics","volumeDb","log10","performance","chunkTime","serverReadChunkSize","totalLatencyTime","ceil","perfStatus","eightyPercentChunkTime","ping","perfTime","roundedPerfTime","gt","yt","rt","newDataPoint","timestamp","now","perfTimeValue","greenTime","yellowTime","redTime","prevData","newChartData","slice","perfValueString","displayValues","Vol","unit","Ping","Total","Perf","downloadLogFile","logContent","toISOString","join","Blob","link","metricKey","metricInfo","num","ResponsiveContainer","width","height","ComposedChart","data","CartesianGrid","strokeDasharray","strokeOpacity","XAxis","tickFormatter","unixTime","tick","YAxis","angle","position","Tooltip","content","Legend","wrapperStyle","paddingTop","Area","stackId","fillOpacity","legendType","Line","dot","f0Detectors","appGuiSettingState","edition","useIndexedDB","clientType","localSilentThreshold","setLocalSilentThreshold","silentThreshold","localChunkSize","setLocalChunkSize","localExtraSize","setLocalExtraSize","extraConvertSize","st","cs","ex","echo","echoCancel","noise1","noiseSuppression","noise2","noiseSuppression2","loadCache","handleChangeEchoCancel","handleChangeNoiseSuppression","handleChangeNoiseSuppression2","inputChunkNum","trancateBuffer","gpu","gpus","parseInt","handleChangeGpu","memory","f0Detector","indexOf","recommended","extractor","values","generateF0DetOptions","audioState","setAudioState","warningMessage","setWarningMessage","isClientAudioAvailable","serverInputDevices","serverAudioInputDevices","serverOutputDevices","serverAudioOutputDevices","isServerAudioAvailable","isArray","newAudioState","messages","availableAudioDrivers","setAvailableAudioDrivers","selectedAudioDriver","setSelectedAudioDriver","selectedInputDevice","setSelectedInputDevice","selectedOutputDevice","setSelectedOutputDevice","selectedMonitorDevice","setSelectedMonitorDevice","selectedMonitorAudioDriver","setSelectedMonitorAudioDriver","device","hostAPI","serverMonitorDevices","serverSettings","inputs","outputs","hostApis","uniqueHostApis","startsWith","index","fetchServerDevices","serverInputAudioSampleRate","serverOutputAudioSampleRate","serverMonitorAudioSampleRate","driver","asioInputChannel","maxInputChannels","_","asioOutputChannel","maxOutputChannels","newDriver","serverMonitorDeviceId","inputGain","setInputGain","outputGain","setOutputGain","monitorGain","setMonitorGain","serverInputAudioGain","serverOutputAudioGain","serverMonitorAudioGain","gain","output","monitor","input","CARD_IDS","cardOrder","setCardOrder","sensors","collisionDetection","onDragEnd","over","items","oldIndex","newIndex","cardId","cardComponent","setIsSidebarOpen","innerWidth","currentModal","setCurrentModal","breakpointHandleResize","currentIsDesktop","addEventListener","removeEventListener","modalProps","modalDetails","finalPropsForContent","alert","editProps","deleteProps","passThroughProps","zIndex","particleCount","particleColor","canvasRef","particlesArray","animationFrameId","canvas","ctx","getContext","setCanvasSize","innerHeight","count","color","i","random","y","vx","vy","radius","alpha","createParticles","animateParticles","clearRect","particle","beginPath","arc","PI","fillStyle","globalAlpha","requestAnimationFrame","cancelAnimationFrame","top","left","pointerEvents","onGetStarted","AppContent","showWelcome","setShowWelcome","handleWelcomeComplete","particleConfig","rootElement","render","setAudioContext","createAudioContext","location","searchParams","get","AudioContext","useAudioConfig","guiSettingLoaded","setGuiSettingLoaded","appGuiSetting","setAppGuiSetting","setVersion","setEdition","res","getVersionInfo","getAppGuiSetting","method","appSetting","json","clearAppGuiSetting","useAppGuiSetting","getGUISetting"],"sourceRoot":""}